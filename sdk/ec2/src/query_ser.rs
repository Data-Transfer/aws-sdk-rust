// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("InstanceCount");
    if let Some(var_2) = &input.instance_count {
        scope_1.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("OfferingId");
    if let Some(var_4) = &input.offering_id {
        scope_3.string(var_4);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("ResourceType");
    if let Some(var_6) = &input.resource_type {
        scope_5.string(var_6.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Tag");
    if let Some(var_8) = &input.tags {
        let mut list_10 = scope_7.start_list(true, Some("item"));
        for item_9 in var_8 {
            #[allow(unused_mut)]
            let mut entry_11 = list_10.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_11, item_9)?;
        }
        list_10.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_iam_instance_profile_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IamInstanceProfileSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("Arn");
    if let Some(var_13) = &input.arn {
        scope_12.string(var_13);
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("Name");
    if let Some(var_15) = &input.name {
        scope_14.string(var_15);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_association_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowAssociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_16 = writer.prefix("InstanceId");
    if let Some(var_17) = &input.instance_ids {
        let mut list_19 = scope_16.start_list(true, Some("item"));
        for item_18 in var_17 {
            #[allow(unused_mut)]
            let mut entry_20 = list_19.entry();
            entry_20.string(item_18);
        }
        list_19.finish();
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("InstanceTag");
    if let Some(var_22) = &input.instance_tags {
        let mut list_24 = scope_21.start_list(true, Some("item"));
        for item_23 in var_22 {
            #[allow(unused_mut)]
            let mut entry_25 = list_24.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_25, item_23)?;
        }
        list_24.finish();
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("DedicatedHostId");
    if let Some(var_27) = &input.dedicated_host_ids {
        let mut list_29 = scope_26.start_list(true, Some("item"));
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("FromPort");
    if let Some(var_32) = &input.from_port {
        scope_31.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_32).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("IpProtocol");
    if let Some(var_34) = &input.ip_protocol {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("IpRanges");
    if let Some(var_36) = &input.ip_ranges {
        let mut list_38 = scope_35.start_list(true, Some("item"));
        for item_37 in var_36 {
            #[allow(unused_mut)]
            let mut entry_39 = list_38.entry();
            crate::query_ser::serialize_structure_crate_model_ip_range(entry_39, item_37)?;
        }
        list_38.finish();
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Ipv6Ranges");
    if let Some(var_41) = &input.ipv6_ranges {
        let mut list_43 = scope_40.start_list(true, Some("item"));
        for item_42 in var_41 {
            #[allow(unused_mut)]
            let mut entry_44 = list_43.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_range(entry_44, item_42)?;
        }
        list_43.finish();
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("PrefixListIds");
    if let Some(var_46) = &input.prefix_list_ids {
        let mut list_48 = scope_45.start_list(true, Some("item"));
        for item_47 in var_46 {
            #[allow(unused_mut)]
            let mut entry_49 = list_48.entry();
            crate::query_ser::serialize_structure_crate_model_prefix_list_id(entry_49, item_47)?;
        }
        list_48.finish();
    }
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("ToPort");
    if let Some(var_51) = &input.to_port {
        scope_50.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("Groups");
    if let Some(var_53) = &input.user_id_group_pairs {
        let mut list_55 = scope_52.start_list(true, Some("item"));
        for item_54 in var_53 {
            #[allow(unused_mut)]
            let mut entry_56 = list_55.entry();
            crate::query_ser::serialize_structure_crate_model_user_id_group_pair(
                entry_56, item_54,
            )?;
        }
        list_55.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("S3");
    if let Some(var_58) = &input.s3 {
        crate::query_ser::serialize_structure_crate_model_s3_storage(scope_57, var_58)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reservation_fleet_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservationFleetInstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("InstanceType");
    if let Some(var_60) = &input.instance_type {
        scope_59.string(var_60.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("InstancePlatform");
    if let Some(var_62) = &input.instance_platform {
        scope_61.string(var_62.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("Weight");
    if let Some(var_64) = &input.weight {
        scope_63.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_64).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("AvailabilityZone");
    if let Some(var_66) = &input.availability_zone {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("AvailabilityZoneId");
    if let Some(var_68) = &input.availability_zone_id {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("EbsOptimized");
    if let Some(var_70) = &input.ebs_optimized {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Priority");
    if let Some(var_72) = &input.priority {
        scope_71.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_72).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_vpn_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientVpnAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("Type");
    if let Some(var_74) = &input.r#type {
        scope_73.string(var_74.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("ActiveDirectory");
    if let Some(var_76) = &input.active_directory {
        crate::query_ser::serialize_structure_crate_model_directory_service_authentication_request(
            scope_75, var_76,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("MutualAuthentication");
    if let Some(var_78) = &input.mutual_authentication {
        crate::query_ser::serialize_structure_crate_model_certificate_authentication_request(
            scope_77, var_78,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("FederatedAuthentication");
    if let Some(var_80) = &input.federated_authentication {
        crate::query_ser::serialize_structure_crate_model_federated_authentication_request(
            scope_79, var_80,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_connection_log_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ConnectionLogOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("Enabled");
    if let Some(var_82) = &input.enabled {
        scope_81.boolean(*var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("CloudwatchLogGroup");
    if let Some(var_84) = &input.cloudwatch_log_group {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("CloudwatchLogStream");
    if let Some(var_86) = &input.cloudwatch_log_stream {
        scope_85.string(var_86);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_connect_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientConnectOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("Enabled");
    if let Some(var_88) = &input.enabled {
        scope_87.boolean(*var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("LambdaFunctionArn");
    if let Some(var_90) = &input.lambda_function_arn {
        scope_89.string(var_90);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_login_banner_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientLoginBannerOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("Enabled");
    if let Some(var_92) = &input.enabled {
        scope_91.boolean(*var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("BannerText");
    if let Some(var_94) = &input.banner_text {
        scope_93.string(var_94);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_new_dhcp_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NewDhcpConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("Key");
    if let Some(var_96) = &input.key {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Value");
    if let Some(var_98) = &input.values {
        let mut list_100 = scope_97.start_list(true, Some("item"));
        for item_99 in var_98 {
            #[allow(unused_mut)]
            let mut entry_101 = list_100.entry();
            entry_101.string(item_99);
        }
        list_100.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("AllocationStrategy");
    if let Some(var_103) = &input.allocation_strategy {
        scope_102.string(var_103.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("MaintenanceStrategies");
    if let Some(var_105) = &input.maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(scope_104, var_105)?;
    }
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_107) = &input.instance_interruption_behavior {
        scope_106.string(var_107.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_109) = &input.instance_pools_to_use_count {
        scope_108.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("SingleInstanceType");
    if let Some(var_111) = &input.single_instance_type {
        scope_110.boolean(*var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_113) = &input.single_availability_zone {
        scope_112.boolean(*var_113);
    }
    #[allow(unused_mut)]
    let mut scope_114 = writer.prefix("MinTargetCapacity");
    if let Some(var_115) = &input.min_target_capacity {
        scope_114.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_115).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_116 = writer.prefix("MaxTotalPrice");
    if let Some(var_117) = &input.max_total_price {
        scope_116.string(var_117);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_on_demand_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::OnDemandOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_118 = writer.prefix("AllocationStrategy");
    if let Some(var_119) = &input.allocation_strategy {
        scope_118.string(var_119.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_120 = writer.prefix("CapacityReservationOptions");
    if let Some(var_121) = &input.capacity_reservation_options {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_options_request(
            scope_120, var_121,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_122 = writer.prefix("SingleInstanceType");
    if let Some(var_123) = &input.single_instance_type {
        scope_122.boolean(*var_123);
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("SingleAvailabilityZone");
    if let Some(var_125) = &input.single_availability_zone {
        scope_124.boolean(*var_125);
    }
    #[allow(unused_mut)]
    let mut scope_126 = writer.prefix("MinTargetCapacity");
    if let Some(var_127) = &input.min_target_capacity {
        scope_126.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_128 = writer.prefix("MaxTotalPrice");
    if let Some(var_129) = &input.max_total_price {
        scope_128.string(var_129);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_config_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateConfigRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_131) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification_request(scope_130, var_131)?;
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("Overrides");
    if let Some(var_133) = &input.overrides {
        let mut list_135 = scope_132.start_list(true, Some("item"));
        for item_134 in var_133 {
            #[allow(unused_mut)]
            let mut entry_136 = list_135.entry();
            crate::query_ser::serialize_structure_crate_model_fleet_launch_template_overrides_request(entry_136, item_134)?;
        }
        list_135.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_capacity_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetCapacitySpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("TotalTargetCapacity");
    if let Some(var_138) = &input.total_target_capacity {
        scope_137.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_138).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_140) = &input.on_demand_target_capacity {
        scope_139.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_140).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("SpotTargetCapacity");
    if let Some(var_142) = &input.spot_target_capacity {
        scope_141.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_142).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("DefaultTargetCapacityType");
    if let Some(var_144) = &input.default_target_capacity_type {
        scope_143.string(var_144.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_146) = &input.target_capacity_unit_type {
        scope_145.string(var_146.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_destination_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DestinationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("FileFormat");
    if let Some(var_148) = &input.file_format {
        scope_147.string(var_148.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("HiveCompatiblePartitions");
    if let Some(var_150) = &input.hive_compatible_partitions {
        scope_149.boolean(*var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("PerHourPartition");
    if let Some(var_152) = &input.per_hour_partition {
        scope_151.boolean(*var_152);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_storage_location(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::StorageLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("Bucket");
    if let Some(var_154) = &input.bucket {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("Key");
    if let Some(var_156) = &input.key {
        scope_155.string(var_156);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DeviceName");
    if let Some(var_158) = &input.device_name {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("VirtualName");
    if let Some(var_160) = &input.virtual_name {
        scope_159.string(var_160);
    }
    #[allow(unused_mut)]
    let mut scope_161 = writer.prefix("Ebs");
    if let Some(var_162) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_block_device(scope_161, var_162)?;
    }
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("NoDevice");
    if let Some(var_164) = &input.no_device {
        scope_163.string(var_164);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("StartWeekDay");
    if let Some(var_166) = &input.start_week_day {
        scope_165.string(var_166.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("StartHour");
    if let Some(var_168) = &input.start_hour {
        scope_167.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_168).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("EndWeekDay");
    if let Some(var_170) = &input.end_week_day {
        scope_169.string(var_170.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("EndHour");
    if let Some(var_172) = &input.end_hour {
        scope_171.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_172).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_to_s3_task_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportToS3TaskSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("ContainerFormat");
    if let Some(var_174) = &input.container_format {
        scope_173.string(var_174.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("DiskImageFormat");
    if let Some(var_176) = &input.disk_image_format {
        scope_175.string(var_176.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("S3Bucket");
    if let Some(var_178) = &input.s3_bucket {
        scope_177.string(var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("S3Prefix");
    if let Some(var_180) = &input.s3_prefix {
        scope_179.string(var_180);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("RegionName");
    if let Some(var_182) = &input.region_name {
        scope_181.string(var_182);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_ipam_resource_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestIpamResourceTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("Key");
    if let Some(var_184) = &input.key {
        scope_183.string(var_184);
    }
    #[allow(unused_mut)]
    let mut scope_185 = writer.prefix("Value");
    if let Some(var_186) = &input.value {
        scope_185.string(var_186);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_launch_template_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestLaunchTemplateData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_187 = writer.prefix("KernelId");
    if let Some(var_188) = &input.kernel_id {
        scope_187.string(var_188);
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("EbsOptimized");
    if let Some(var_190) = &input.ebs_optimized {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("IamInstanceProfile");
    if let Some(var_192) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(scope_191, var_192)?;
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("BlockDeviceMapping");
    if let Some(var_194) = &input.block_device_mappings {
        let mut list_196 = scope_193.start_list(true, Some("BlockDeviceMapping"));
        for item_195 in var_194 {
            #[allow(unused_mut)]
            let mut entry_197 = list_196.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_block_device_mapping_request(entry_197, item_195)?;
        }
        list_196.finish();
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("NetworkInterface");
    if let Some(var_199) = &input.network_interfaces {
        let mut list_201 =
            scope_198.start_list(true, Some("InstanceNetworkInterfaceSpecification"));
        for item_200 in var_199 {
            #[allow(unused_mut)]
            let mut entry_202 = list_201.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(entry_202, item_200)?;
        }
        list_201.finish();
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("ImageId");
    if let Some(var_204) = &input.image_id {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("InstanceType");
    if let Some(var_206) = &input.instance_type {
        scope_205.string(var_206.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("KeyName");
    if let Some(var_208) = &input.key_name {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("Monitoring");
    if let Some(var_210) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_launch_templates_monitoring_request(
            scope_209, var_210,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("Placement");
    if let Some(var_212) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_launch_template_placement_request(
            scope_211, var_212,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("RamDiskId");
    if let Some(var_214) = &input.ram_disk_id {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("DisableApiTermination");
    if let Some(var_216) = &input.disable_api_termination {
        scope_215.boolean(*var_216);
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_218) = &input.instance_initiated_shutdown_behavior {
        scope_217.string(var_218.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_219 = writer.prefix("UserData");
    if let Some(var_220) = &input.user_data {
        scope_219.string(var_220);
    }
    #[allow(unused_mut)]
    let mut scope_221 = writer.prefix("TagSpecification");
    if let Some(var_222) = &input.tag_specifications {
        let mut list_224 =
            scope_221.start_list(true, Some("LaunchTemplateTagSpecificationRequest"));
        for item_223 in var_222 {
            #[allow(unused_mut)]
            let mut entry_225 = list_224.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_tag_specification_request(entry_225, item_223)?;
        }
        list_224.finish();
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("ElasticGpuSpecification");
    if let Some(var_227) = &input.elastic_gpu_specifications {
        let mut list_229 = scope_226.start_list(true, Some("ElasticGpuSpecification"));
        for item_228 in var_227 {
            #[allow(unused_mut)]
            let mut entry_230 = list_229.entry();
            crate::query_ser::serialize_structure_crate_model_elastic_gpu_specification(
                entry_230, item_228,
            )?;
        }
        list_229.finish();
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("ElasticInferenceAccelerator");
    if let Some(var_232) = &input.elastic_inference_accelerators {
        let mut list_234 = scope_231.start_list(true, Some("item"));
        for item_233 in var_232 {
            #[allow(unused_mut)]
            let mut entry_235 = list_234.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_elastic_inference_accelerator(entry_235, item_233)?;
        }
        list_234.finish();
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("SecurityGroupId");
    if let Some(var_237) = &input.security_group_ids {
        let mut list_239 = scope_236.start_list(true, Some("SecurityGroupId"));
        for item_238 in var_237 {
            #[allow(unused_mut)]
            let mut entry_240 = list_239.entry();
            entry_240.string(item_238);
        }
        list_239.finish();
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("SecurityGroup");
    if let Some(var_242) = &input.security_groups {
        let mut list_244 = scope_241.start_list(true, Some("SecurityGroup"));
        for item_243 in var_242 {
            #[allow(unused_mut)]
            let mut entry_245 = list_244.entry();
            entry_245.string(item_243);
        }
        list_244.finish();
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("InstanceMarketOptions");
    if let Some(var_247) = &input.instance_market_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_market_options_request(scope_246, var_247)?;
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("CreditSpecification");
    if let Some(var_249) = &input.credit_specification {
        crate::query_ser::serialize_structure_crate_model_credit_specification_request(
            scope_248, var_249,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("CpuOptions");
    if let Some(var_251) = &input.cpu_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_cpu_options_request(
            scope_250, var_251,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_252 = writer.prefix("CapacityReservationSpecification");
    if let Some(var_253) = &input.capacity_reservation_specification {
        crate::query_ser::serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(scope_252, var_253)?;
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("LicenseSpecification");
    if let Some(var_255) = &input.license_specifications {
        let mut list_257 = scope_254.start_list(true, Some("item"));
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_license_configuration_request(entry_258, item_256)?;
        }
        list_257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("HibernationOptions");
    if let Some(var_260) = &input.hibernation_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_hibernation_options_request(scope_259, var_260)?;
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("MetadataOptions");
    if let Some(var_262) = &input.metadata_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_instance_metadata_options_request(scope_261, var_262)?;
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("EnclaveOptions");
    if let Some(var_264) = &input.enclave_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_enclave_options_request(
            scope_263, var_264,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("InstanceRequirements");
    if let Some(var_266) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_265, var_266,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("PrivateDnsNameOptions");
    if let Some(var_268) = &input.private_dns_name_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_private_dns_name_options_request(scope_267, var_268)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_add_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AddPrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("Cidr");
    if let Some(var_270) = &input.cidr {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("Description");
    if let Some(var_272) = &input.description {
        scope_271.string(var_272);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_icmp_type_code(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IcmpTypeCode,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("Code");
    if let Some(var_274) = &input.code {
        scope_273.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_274).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_275 = writer.prefix("Type");
    if let Some(var_276) = &input.r#type {
        scope_275.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_276).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_port_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_277 = writer.prefix("From");
    if let Some(var_278) = &input.from {
        scope_277.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_279 = writer.prefix("To");
    if let Some(var_280) = &input.to {
        scope_279.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_280).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_access_scope_path_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AccessScopePathRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_281 = writer.prefix("Source");
    if let Some(var_282) = &input.source {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_281, var_282,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("Destination");
    if let Some(var_284) = &input.destination {
        crate::query_ser::serialize_structure_crate_model_path_statement_request(
            scope_283, var_284,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("ThroughResource");
    if let Some(var_286) = &input.through_resources {
        let mut list_288 = scope_285.start_list(true, Some("item"));
        for item_287 in var_286 {
            #[allow(unused_mut)]
            let mut entry_289 = list_288.entry();
            crate::query_ser::serialize_structure_crate_model_through_resources_statement_request(
                entry_289, item_287,
            )?;
        }
        list_288.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("Ipv6Address");
    if let Some(var_291) = &input.ipv6_address {
        scope_290.string(var_291);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_ip_address_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateIpAddressSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("Primary");
    if let Some(var_293) = &input.primary {
        scope_292.boolean(*var_293);
    }
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("PrivateIpAddress");
    if let Some(var_295) = &input.private_ip_address {
        scope_294.string(var_295);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv4_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv4PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("Ipv4Prefix");
    if let Some(var_297) = &input.ipv4_prefix {
        scope_296.string(var_297);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_prefix_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6PrefixSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("Ipv6Prefix");
    if let Some(var_299) = &input.ipv6_prefix {
        scope_298.string(var_299);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_price_schedule_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PriceScheduleSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("CurrencyCode");
    if let Some(var_301) = &input.currency_code {
        scope_300.string(var_301.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_302 = writer.prefix("Price");
    if let Some(var_303) = &input.price {
        scope_302.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_303).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("Term");
    if let Some(var_305) = &input.term {
        scope_304.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_305).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_306 = writer.prefix("InstanceId");
    if let Some(var_307) = &input.instance_id {
        scope_306.string(var_307);
    }
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("ExcludeBootVolume");
    if let Some(var_309) = &input.exclude_boot_volume {
        scope_308.boolean(*var_309);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_object_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3ObjectTag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("Key");
    if let Some(var_311) = &input.key {
        scope_310.string(var_311);
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("Value");
    if let Some(var_313) = &input.value {
        scope_312.string(var_313);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("Key");
    if let Some(var_315) = &input.key {
        scope_314.string(var_315);
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("Value");
    if let Some(var_317) = &input.value {
        scope_316.string(var_317);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_traffic_mirror_port_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TrafficMirrorPortRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_318 = writer.prefix("FromPort");
    if let Some(var_319) = &input.from_port {
        scope_318.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_319).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_320 = writer.prefix("ToPort");
    if let Some(var_321) = &input.to_port {
        scope_320.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_321).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("AmazonSideAsn");
    if let Some(var_323) = &input.amazon_side_asn {
        scope_322.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_325) = &input.auto_accept_shared_attachments {
        scope_324.string(var_325.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_327) = &input.default_route_table_association {
        scope_326.string(var_327.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_329) = &input.default_route_table_propagation {
        scope_328.string(var_329.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("VpnEcmpSupport");
    if let Some(var_331) = &input.vpn_ecmp_support {
        scope_330.string(var_331.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("DnsSupport");
    if let Some(var_333) = &input.dns_support {
        scope_332.string(var_333.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_334 = writer.prefix("MulticastSupport");
    if let Some(var_335) = &input.multicast_support {
        scope_334.string(var_335.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("TransitGatewayCidrBlocks");
    if let Some(var_337) = &input.transit_gateway_cidr_blocks {
        let mut list_339 = scope_336.start_list(true, Some("item"));
        for item_338 in var_337 {
            #[allow(unused_mut)]
            let mut entry_340 = list_339.entry();
            entry_340.string(item_338);
        }
        list_339.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_connect_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayConnectRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("Protocol");
    if let Some(var_342) = &input.protocol {
        scope_341.string(var_342.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_transit_gateway_connect_request_bgp_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TransitGatewayConnectRequestBgpOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("PeerAsn");
    if let Some(var_344) = &input.peer_asn {
        scope_343.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_344).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_multicast_domain_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayMulticastDomainRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("Igmpv2Support");
    if let Some(var_346) = &input.igmpv2_support {
        scope_345.string(var_346.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("StaticSourcesSupport");
    if let Some(var_348) = &input.static_sources_support {
        scope_347.string(var_348.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("AutoAcceptSharedAssociations");
    if let Some(var_350) = &input.auto_accept_shared_associations {
        scope_349.string(var_350.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("DnsSupport");
    if let Some(var_352) = &input.dns_support {
        scope_351.string(var_352.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_353 = writer.prefix("Ipv6Support");
    if let Some(var_354) = &input.ipv6_support {
        scope_353.string(var_354.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_355 = writer.prefix("ApplianceModeSupport");
    if let Some(var_356) = &input.appliance_mode_support {
        scope_355.string(var_356.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_connection_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnConnectionOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("EnableAcceleration");
    if let Some(var_358) = &input.enable_acceleration {
        scope_357.boolean(*var_358);
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("StaticRoutesOnly");
    if let Some(var_360) = &input.static_routes_only {
        scope_359.boolean(*var_360);
    }
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("TunnelInsideIpVersion");
    if let Some(var_362) = &input.tunnel_inside_ip_version {
        scope_361.string(var_362.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("TunnelOptions");
    if let Some(var_364) = &input.tunnel_options {
        let mut list_366 = scope_363.start_list(true, None);
        for item_365 in var_364 {
            #[allow(unused_mut)]
            let mut entry_367 = list_366.entry();
            crate::query_ser::serialize_structure_crate_model_vpn_tunnel_options_specification(
                entry_367, item_365,
            )?;
        }
        list_366.finish();
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("LocalIpv4NetworkCidr");
    if let Some(var_369) = &input.local_ipv4_network_cidr {
        scope_368.string(var_369);
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("RemoteIpv4NetworkCidr");
    if let Some(var_371) = &input.remote_ipv4_network_cidr {
        scope_370.string(var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("LocalIpv6NetworkCidr");
    if let Some(var_373) = &input.local_ipv6_network_cidr {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("RemoteIpv6NetworkCidr");
    if let Some(var_375) = &input.remote_ipv6_network_cidr {
        scope_374.string(var_375);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_deregister_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DeregisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_377) = &input.include_all_tags_of_instance {
        scope_376.boolean(*var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("InstanceTagKey");
    if let Some(var_379) = &input.instance_tag_keys {
        let mut list_381 = scope_378.start_list(true, Some("item"));
        for item_380 in var_379 {
            #[allow(unused_mut)]
            let mut entry_382 = list_381.entry();
            entry_382.string(item_380);
        }
        list_381.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_filter(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Filter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("Name");
    if let Some(var_384) = &input.name {
        scope_383.string(var_384);
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("Value");
    if let Some(var_386) = &input.values {
        let mut list_388 = scope_385.start_list(true, Some("item"));
        for item_387 in var_386 {
            #[allow(unused_mut)]
            let mut entry_389 = list_388.entry();
            entry_389.string(item_387);
        }
        list_388.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_date_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotDateTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("EarliestTime");
    if let Some(var_391) = &input.earliest_time {
        scope_390.date_time(var_391, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("LatestTime");
    if let Some(var_393) = &input.latest_time {
        scope_392.date_time(var_393, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instance_recurrence_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstanceRecurrenceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("Frequency");
    if let Some(var_395) = &input.frequency {
        scope_394.string(var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("Interval");
    if let Some(var_397) = &input.interval {
        scope_396.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_397).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("OccurrenceDay");
    if let Some(var_399) = &input.occurrence_days {
        let mut list_401 = scope_398.start_list(true, Some("OccurenceDay"));
        for item_400 in var_399 {
            #[allow(unused_mut)]
            let mut entry_402 = list_401.entry();
            entry_402.number(
                #[allow(clippy::useless_conversion)]
                aws_smithy_types::Number::NegInt((*item_400).into()),
            );
        }
        list_401.finish();
    }
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("OccurrenceRelativeToEnd");
    if let Some(var_404) = &input.occurrence_relative_to_end {
        scope_403.boolean(*var_404);
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("OccurrenceUnit");
    if let Some(var_406) = &input.occurrence_unit {
        scope_405.string(var_406);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_slot_start_time_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SlotStartTimeRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("EarliestTime");
    if let Some(var_408) = &input.earliest_time {
        scope_407.date_time(var_408, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("LatestTime");
    if let Some(var_410) = &input.latest_time {
        scope_409.date_time(var_410, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_event_window_disassociation_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceEventWindowDisassociationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("InstanceId");
    if let Some(var_412) = &input.instance_ids {
        let mut list_414 = scope_411.start_list(true, Some("item"));
        for item_413 in var_412 {
            #[allow(unused_mut)]
            let mut entry_415 = list_414.entry();
            entry_415.string(item_413);
        }
        list_414.finish();
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("InstanceTag");
    if let Some(var_417) = &input.instance_tags {
        let mut list_419 = scope_416.start_list(true, Some("item"));
        for item_418 in var_417 {
            #[allow(unused_mut)]
            let mut entry_420 = list_419.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_420, item_418)?;
        }
        list_419.finish();
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("DedicatedHostId");
    if let Some(var_422) = &input.dedicated_host_ids {
        let mut list_424 = scope_421.start_list(true, Some("item"));
        for item_423 in var_422 {
            #[allow(unused_mut)]
            let mut entry_425 = list_424.entry();
            entry_425.string(item_423);
        }
        list_424.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_snapshot_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FastLaunchSnapshotConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("TargetResourceCount");
    if let Some(var_427) = &input.target_resource_count {
        scope_426.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_427).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fast_launch_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FastLaunchLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_428 = writer.prefix("LaunchTemplateId");
    if let Some(var_429) = &input.launch_template_id {
        scope_428.string(var_429);
    }
    #[allow(unused_mut)]
    let mut scope_430 = writer.prefix("LaunchTemplateName");
    if let Some(var_431) = &input.launch_template_name {
        scope_430.string(var_431);
    }
    #[allow(unused_mut)]
    let mut scope_432 = writer.prefix("Version");
    if let Some(var_433) = &input.version {
        scope_432.string(var_433);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_export_task_s3_location_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ExportTaskS3LocationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("S3Bucket");
    if let Some(var_435) = &input.s3_bucket {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("S3Prefix");
    if let Some(var_437) = &input.s3_prefix {
        scope_436.string(var_437);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_integrate_services(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IntegrateServices,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("AthenaIntegration");
    if let Some(var_439) = &input.athena_integrations {
        let mut list_441 = scope_438.start_list(true, Some("item"));
        for item_440 in var_439 {
            #[allow(unused_mut)]
            let mut entry_442 = list_441.entry();
            crate::query_ser::serialize_structure_crate_model_athena_integration(
                entry_442, item_440,
            )?;
        }
        list_441.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("VCpuCount");
    if let Some(var_444) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range_request(
            scope_443, var_444,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("MemoryMiB");
    if let Some(var_446) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b_request(scope_445, var_446)?;
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("CpuManufacturer");
    if let Some(var_448) = &input.cpu_manufacturers {
        let mut list_450 = scope_447.start_list(true, Some("item"));
        for item_449 in var_448 {
            #[allow(unused_mut)]
            let mut entry_451 = list_450.entry();
            entry_451.string(item_449.as_str());
        }
        list_450.finish();
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_453) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
            scope_452, var_453,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("ExcludedInstanceType");
    if let Some(var_455) = &input.excluded_instance_types {
        let mut list_457 = scope_454.start_list(true, Some("item"));
        for item_456 in var_455 {
            #[allow(unused_mut)]
            let mut entry_458 = list_457.entry();
            entry_458.string(item_456);
        }
        list_457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("InstanceGeneration");
    if let Some(var_460) = &input.instance_generations {
        let mut list_462 = scope_459.start_list(true, Some("item"));
        for item_461 in var_460 {
            #[allow(unused_mut)]
            let mut entry_463 = list_462.entry();
            entry_463.string(item_461.as_str());
        }
        list_462.finish();
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_465) = &input.spot_max_price_percentage_over_lowest_price {
        scope_464.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_465).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_467) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_466.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_467).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("BareMetal");
    if let Some(var_469) = &input.bare_metal {
        scope_468.string(var_469.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("BurstablePerformance");
    if let Some(var_471) = &input.burstable_performance {
        scope_470.string(var_471.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("RequireHibernateSupport");
    if let Some(var_473) = &input.require_hibernate_support {
        scope_472.boolean(*var_473);
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_475) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count_request(
            scope_474, var_475,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("LocalStorage");
    if let Some(var_477) = &input.local_storage {
        scope_476.string(var_477.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("LocalStorageType");
    if let Some(var_479) = &input.local_storage_types {
        let mut list_481 = scope_478.start_list(true, Some("item"));
        for item_480 in var_479 {
            #[allow(unused_mut)]
            let mut entry_482 = list_481.entry();
            entry_482.string(item_480.as_str());
        }
        list_481.finish();
    }
    #[allow(unused_mut)]
    let mut scope_483 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_484) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb_request(
            scope_483, var_484,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_485 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_486) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
            scope_485, var_486,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_487 = writer.prefix("AcceleratorType");
    if let Some(var_488) = &input.accelerator_types {
        let mut list_490 = scope_487.start_list(true, Some("item"));
        for item_489 in var_488 {
            #[allow(unused_mut)]
            let mut entry_491 = list_490.entry();
            entry_491.string(item_489.as_str());
        }
        list_490.finish();
    }
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("AcceleratorCount");
    if let Some(var_493) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count_request(
            scope_492, var_493,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("AcceleratorManufacturer");
    if let Some(var_495) = &input.accelerator_manufacturers {
        let mut list_497 = scope_494.start_list(true, Some("item"));
        for item_496 in var_495 {
            #[allow(unused_mut)]
            let mut entry_498 = list_497.entry();
            entry_498.string(item_496.as_str());
        }
        list_497.finish();
    }
    #[allow(unused_mut)]
    let mut scope_499 = writer.prefix("AcceleratorName");
    if let Some(var_500) = &input.accelerator_names {
        let mut list_502 = scope_499.start_list(true, Some("item"));
        for item_501 in var_500 {
            #[allow(unused_mut)]
            let mut entry_503 = list_502.entry();
            entry_503.string(item_501.as_str());
        }
        list_502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_505) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
            scope_504, var_505,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements_with_metadata_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirementsWithMetadataRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("ArchitectureType");
    if let Some(var_507) = &input.architecture_types {
        let mut list_509 = scope_506.start_list(true, Some("item"));
        for item_508 in var_507 {
            #[allow(unused_mut)]
            let mut entry_510 = list_509.entry();
            entry_510.string(item_508.as_str());
        }
        list_509.finish();
    }
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("VirtualizationType");
    if let Some(var_512) = &input.virtualization_types {
        let mut list_514 = scope_511.start_list(true, Some("item"));
        for item_513 in var_512 {
            #[allow(unused_mut)]
            let mut entry_515 = list_514.entry();
            entry_515.string(item_513.as_str());
        }
        list_514.finish();
    }
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("InstanceRequirements");
    if let Some(var_517) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_516, var_517,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_client_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClientData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("Comment");
    if let Some(var_519) = &input.comment {
        scope_518.string(var_519);
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("UploadEnd");
    if let Some(var_521) = &input.upload_end {
        scope_520.date_time(var_521, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("UploadSize");
    if let Some(var_523) = &input.upload_size {
        scope_522.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_523).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("UploadStart");
    if let Some(var_525) = &input.upload_start {
        scope_524.date_time(var_525, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_image_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImageDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("Description");
    if let Some(var_527) = &input.description {
        scope_526.string(var_527);
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("DeviceName");
    if let Some(var_529) = &input.device_name {
        scope_528.string(var_529);
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("Format");
    if let Some(var_531) = &input.format {
        scope_530.string(var_531);
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("SnapshotId");
    if let Some(var_533) = &input.snapshot_id {
        scope_532.string(var_533);
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("Url");
    if let Some(var_535) = &input.url {
        scope_534.string(var_535);
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("UserBucket");
    if let Some(var_537) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_536, var_537)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_image_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportImageLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_539) = &input.license_configuration_arn {
        scope_538.string(var_539);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("Description");
    if let Some(var_541) = &input.description {
        scope_540.string(var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("Image");
    if let Some(var_543) = &input.image {
        crate::query_ser::serialize_structure_crate_model_disk_image_detail(scope_542, var_543)?;
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("Volume");
    if let Some(var_545) = &input.volume {
        crate::query_ser::serialize_structure_crate_model_volume_detail(scope_544, var_545)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_import_instance_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ImportInstanceLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("AdditionalInfo");
    if let Some(var_547) = &input.additional_info {
        scope_546.string(var_547);
    }
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("Architecture");
    if let Some(var_549) = &input.architecture {
        scope_548.string(var_549.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("GroupId");
    if let Some(var_551) = &input.group_ids {
        let mut list_553 = scope_550.start_list(true, Some("SecurityGroupId"));
        for item_552 in var_551 {
            #[allow(unused_mut)]
            let mut entry_554 = list_553.entry();
            entry_554.string(item_552);
        }
        list_553.finish();
    }
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("GroupName");
    if let Some(var_556) = &input.group_names {
        let mut list_558 = scope_555.start_list(true, Some("SecurityGroup"));
        for item_557 in var_556 {
            #[allow(unused_mut)]
            let mut entry_559 = list_558.entry();
            entry_559.string(item_557);
        }
        list_558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("InstanceInitiatedShutdownBehavior");
    if let Some(var_561) = &input.instance_initiated_shutdown_behavior {
        scope_560.string(var_561.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("InstanceType");
    if let Some(var_563) = &input.instance_type {
        scope_562.string(var_563.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("Monitoring");
    if let Some(var_565) = &input.monitoring {
        scope_564.boolean(*var_565);
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("Placement");
    if let Some(var_567) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_566, var_567)?;
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("PrivateIpAddress");
    if let Some(var_569) = &input.private_ip_address {
        scope_568.string(var_569);
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("SubnetId");
    if let Some(var_571) = &input.subnet_id {
        scope_570.string(var_571);
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("UserData");
    if let Some(var_573) = &input.user_data {
        crate::query_ser::serialize_structure_crate_model_user_data(scope_572, var_573)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_snapshot_disk_container(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SnapshotDiskContainer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("Description");
    if let Some(var_575) = &input.description {
        scope_574.string(var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("Format");
    if let Some(var_577) = &input.format {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("Url");
    if let Some(var_579) = &input.url {
        scope_578.string(var_579);
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("UserBucket");
    if let Some(var_581) = &input.user_bucket {
        crate::query_ser::serialize_structure_crate_model_user_bucket(scope_580, var_581)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_disk_image_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DiskImageDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("Bytes");
    if let Some(var_583) = &input.bytes {
        scope_582.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_583).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("Format");
    if let Some(var_585) = &input.format {
        scope_584.string(var_585.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("ImportManifestUrl");
    if let Some(var_587) = &input.import_manifest_url {
        scope_586.string(var_587);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_volume_detail(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VolumeDetail,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("Size");
    if let Some(var_589) = &input.size {
        scope_588.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_589).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_dns_servers_options_modify_structure(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DnsServersOptionsModifyStructure,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("CustomDnsServers");
    if let Some(var_591) = &input.custom_dns_servers {
        let mut list_593 = scope_590.start_list(true, Some("item"));
        for item_592 in var_591 {
            #[allow(unused_mut)]
            let mut entry_594 = list_593.entry();
            entry_594.string(item_592);
        }
        list_593.finish();
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("Enabled");
    if let Some(var_596) = &input.enabled {
        scope_595.boolean(*var_596);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("Add");
    if let Some(var_598) = &input.add {
        let mut list_600 = scope_597.start_list(true, Some("item"));
        for item_599 in var_598 {
            #[allow(unused_mut)]
            let mut entry_601 = list_600.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_601, item_599,
            )?;
        }
        list_600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("Remove");
    if let Some(var_603) = &input.remove {
        let mut list_605 = scope_602.start_list(true, Some("item"));
        for item_604 in var_603 {
            #[allow(unused_mut)]
            let mut entry_606 = list_605.entry();
            crate::query_ser::serialize_structure_crate_model_load_permission_request(
                entry_606, item_604,
            )?;
        }
        list_605.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("Value");
    if let Some(var_608) = &input.value {
        scope_607.string(var_608);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("Add");
    if let Some(var_610) = &input.add {
        let mut list_612 = scope_609.start_list(true, Some("item"));
        for item_611 in var_610 {
            #[allow(unused_mut)]
            let mut entry_613 = list_612.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_613, item_611,
            )?;
        }
        list_612.finish();
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("Remove");
    if let Some(var_615) = &input.remove {
        let mut list_617 = scope_614.start_list(true, Some("item"));
        for item_616 in var_615 {
            #[allow(unused_mut)]
            let mut entry_618 = list_617.entry();
            crate::query_ser::serialize_structure_crate_model_launch_permission(
                entry_618, item_616,
            )?;
        }
        list_617.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_attribute_boolean_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AttributeBooleanValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("Value");
    if let Some(var_620) = &input.value {
        scope_619.boolean(*var_620);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_block_device_mapping_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceBlockDeviceMappingSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("DeviceName");
    if let Some(var_622) = &input.device_name {
        scope_621.string(var_622);
    }
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("Ebs");
    if let Some(var_624) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_ebs_instance_block_device_specification(
            scope_623, var_624,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("NoDevice");
    if let Some(var_626) = &input.no_device {
        scope_625.string(var_626);
    }
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("VirtualName");
    if let Some(var_628) = &input.virtual_name {
        scope_627.string(var_628);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_blob_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BlobAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("Value");
    if let Some(var_630) = &input.value {
        scope_629.string(&aws_smithy_types::base64::encode(var_630));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("CapacityReservationPreference");
    if let Some(var_632) = &input.capacity_reservation_preference {
        scope_631.string(var_632.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("CapacityReservationTarget");
    if let Some(var_634) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_633, var_634,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceCreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("InstanceId");
    if let Some(var_636) = &input.instance_id {
        scope_635.string(var_636);
    }
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("CpuCredits");
    if let Some(var_638) = &input.cpu_credits {
        scope_637.string(var_638);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_ipam_operating_region(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemoveIpamOperatingRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("RegionName");
    if let Some(var_640) = &input.region_name {
        scope_639.string(var_640);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_remove_prefix_list_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RemovePrefixListEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("Cidr");
    if let Some(var_642) = &input.cidr {
        scope_641.string(var_642);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_attachment_changes(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceAttachmentChanges,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("AttachmentId");
    if let Some(var_644) = &input.attachment_id {
        scope_643.string(var_644);
    }
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("DeleteOnTermination");
    if let Some(var_646) = &input.delete_on_termination {
        scope_645.boolean(*var_646);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instances_configuration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstancesConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("AvailabilityZone");
    if let Some(var_648) = &input.availability_zone {
        scope_647.string(var_648);
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("InstanceCount");
    if let Some(var_650) = &input.instance_count {
        scope_649.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_650).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("InstanceType");
    if let Some(var_652) = &input.instance_type {
        scope_651.string(var_652.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("Platform");
    if let Some(var_654) = &input.platform {
        scope_653.string(var_654);
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("Scope");
    if let Some(var_656) = &input.scope {
        scope_655.string(var_656.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_update(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleUpdate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_658) = &input.security_group_rule_id {
        scope_657.string(var_658);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("SecurityGroupRule");
    if let Some(var_660) = &input.security_group_rule {
        crate::query_ser::serialize_structure_crate_model_security_group_rule_request(
            scope_659, var_660,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission_modifications(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermissionModifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("Add");
    if let Some(var_662) = &input.add {
        let mut list_664 = scope_661.start_list(true, Some("item"));
        for item_663 in var_662 {
            #[allow(unused_mut)]
            let mut entry_665 = list_664.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_665, item_663,
            )?;
        }
        list_664.finish();
    }
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("Remove");
    if let Some(var_667) = &input.remove {
        let mut list_669 = scope_666.start_list(true, Some("item"));
        for item_668 in var_667 {
            #[allow(unused_mut)]
            let mut entry_670 = list_669.entry();
            crate::query_ser::serialize_structure_crate_model_create_volume_permission(
                entry_670, item_668,
            )?;
        }
        list_669.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("LaunchTemplateSpecification");
    if let Some(var_672) = &input.launch_template_specification {
        crate::query_ser::serialize_structure_crate_model_fleet_launch_template_specification(
            scope_671, var_672,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("Overrides");
    if let Some(var_674) = &input.overrides {
        let mut list_676 = scope_673.start_list(true, Some("item"));
        for item_675 in var_674 {
            #[allow(unused_mut)]
            let mut entry_677 = list_676.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_overrides(
                entry_677, item_675,
            )?;
        }
        list_676.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_678 = writer.prefix("AddTransitGatewayCidrBlocks");
    if let Some(var_679) = &input.add_transit_gateway_cidr_blocks {
        let mut list_681 = scope_678.start_list(true, Some("item"));
        for item_680 in var_679 {
            #[allow(unused_mut)]
            let mut entry_682 = list_681.entry();
            entry_682.string(item_680);
        }
        list_681.finish();
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("RemoveTransitGatewayCidrBlocks");
    if let Some(var_684) = &input.remove_transit_gateway_cidr_blocks {
        let mut list_686 = scope_683.start_list(true, Some("item"));
        for item_685 in var_684 {
            #[allow(unused_mut)]
            let mut entry_687 = list_686.entry();
            entry_687.string(item_685);
        }
        list_686.finish();
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("VpnEcmpSupport");
    if let Some(var_689) = &input.vpn_ecmp_support {
        scope_688.string(var_689.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_690 = writer.prefix("DnsSupport");
    if let Some(var_691) = &input.dns_support {
        scope_690.string(var_691.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_692 = writer.prefix("AutoAcceptSharedAttachments");
    if let Some(var_693) = &input.auto_accept_shared_attachments {
        scope_692.string(var_693.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_694 = writer.prefix("DefaultRouteTableAssociation");
    if let Some(var_695) = &input.default_route_table_association {
        scope_694.string(var_695.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("AssociationDefaultRouteTableId");
    if let Some(var_697) = &input.association_default_route_table_id {
        scope_696.string(var_697);
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("DefaultRouteTablePropagation");
    if let Some(var_699) = &input.default_route_table_propagation {
        scope_698.string(var_699.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("PropagationDefaultRouteTableId");
    if let Some(var_701) = &input.propagation_default_route_table_id {
        scope_700.string(var_701);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_transit_gateway_vpc_attachment_request_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyTransitGatewayVpcAttachmentRequestOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("DnsSupport");
    if let Some(var_703) = &input.dns_support {
        scope_702.string(var_703.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("Ipv6Support");
    if let Some(var_705) = &input.ipv6_support {
        scope_704.string(var_705.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("ApplianceModeSupport");
    if let Some(var_707) = &input.appliance_mode_support {
        scope_706.string(var_707.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_peering_connection_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PeeringConnectionOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("AllowDnsResolutionFromRemoteVpc");
    if let Some(var_709) = &input.allow_dns_resolution_from_remote_vpc {
        scope_708.boolean(*var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("AllowEgressFromLocalClassicLinkToRemoteVpc");
    if let Some(var_711) = &input.allow_egress_from_local_classic_link_to_remote_vpc {
        scope_710.boolean(*var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("AllowEgressFromLocalVpcToRemoteClassicLink");
    if let Some(var_713) = &input.allow_egress_from_local_vpc_to_remote_classic_link {
        scope_712.boolean(*var_713);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_modify_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ModifyVpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("TunnelInsideCidr");
    if let Some(var_715) = &input.tunnel_inside_cidr {
        scope_714.string(var_715);
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_717) = &input.tunnel_inside_ipv6_cidr {
        scope_716.string(var_717);
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("PreSharedKey");
    if let Some(var_719) = &input.pre_shared_key {
        scope_718.string(var_719);
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_721) = &input.phase1_lifetime_seconds {
        scope_720.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_721).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_722 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_723) = &input.phase2_lifetime_seconds {
        scope_722.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_723).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_724 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_725) = &input.rekey_margin_time_seconds {
        scope_724.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_725).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_727) = &input.rekey_fuzz_percentage {
        scope_726.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_727).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("ReplayWindowSize");
    if let Some(var_729) = &input.replay_window_size {
        scope_728.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_729).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_731) = &input.dpd_timeout_seconds {
        scope_730.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_731).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("DPDTimeoutAction");
    if let Some(var_733) = &input.dpd_timeout_action {
        scope_732.string(var_733);
    }
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_735) = &input.phase1_encryption_algorithms {
        let mut list_737 = scope_734.start_list(true, Some("item"));
        for item_736 in var_735 {
            #[allow(unused_mut)]
            let mut entry_738 = list_737.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_738, item_736)?;
        }
        list_737.finish();
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_740) = &input.phase2_encryption_algorithms {
        let mut list_742 = scope_739.start_list(true, Some("item"));
        for item_741 in var_740 {
            #[allow(unused_mut)]
            let mut entry_743 = list_742.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_743, item_741)?;
        }
        list_742.finish();
    }
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_745) = &input.phase1_integrity_algorithms {
        let mut list_747 = scope_744.start_list(true, Some("item"));
        for item_746 in var_745 {
            #[allow(unused_mut)]
            let mut entry_748 = list_747.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_748, item_746)?;
        }
        list_747.finish();
    }
    #[allow(unused_mut)]
    let mut scope_749 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_750) = &input.phase2_integrity_algorithms {
        let mut list_752 = scope_749.start_list(true, Some("item"));
        for item_751 in var_750 {
            #[allow(unused_mut)]
            let mut entry_753 = list_752.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_753, item_751)?;
        }
        list_752.finish();
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_755) = &input.phase1_dh_group_numbers {
        let mut list_757 = scope_754.start_list(true, Some("item"));
        for item_756 in var_755 {
            #[allow(unused_mut)]
            let mut entry_758 = list_757.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_758, item_756)?;
        }
        list_757.finish();
    }
    #[allow(unused_mut)]
    let mut scope_759 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_760) = &input.phase2_dh_group_numbers {
        let mut list_762 = scope_759.start_list(true, Some("item"));
        for item_761 in var_760 {
            #[allow(unused_mut)]
            let mut entry_763 = list_762.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_763, item_761)?;
        }
        list_762.finish();
    }
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("IKEVersion");
    if let Some(var_765) = &input.ike_versions {
        let mut list_767 = scope_764.start_list(true, Some("item"));
        for item_766 in var_765 {
            #[allow(unused_mut)]
            let mut entry_768 = list_767.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_768, item_766,
            )?;
        }
        list_767.finish();
    }
    #[allow(unused_mut)]
    let mut scope_769 = writer.prefix("StartupAction");
    if let Some(var_770) = &input.startup_action {
        scope_769.string(var_770);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_771 = writer.prefix("Message");
    if let Some(var_772) = &input.message {
        scope_771.string(var_772);
    }
    #[allow(unused_mut)]
    let mut scope_773 = writer.prefix("Signature");
    if let Some(var_774) = &input.signature {
        scope_773.string(var_774);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipam_cidr_authorization_context(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpamCidrAuthorizationContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("Message");
    if let Some(var_776) = &input.message {
        scope_775.string(var_776);
    }
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("Signature");
    if let Some(var_778) = &input.signature {
        scope_777.string(var_778);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_reserved_instance_limit_price(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ReservedInstanceLimitPrice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("Amount");
    if let Some(var_780) = &input.amount {
        scope_779.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_780).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("CurrencyCode");
    if let Some(var_782) = &input.currency_code {
        scope_781.string(var_782.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_purchase_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PurchaseRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("InstanceCount");
    if let Some(var_784) = &input.instance_count {
        scope_783.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_784).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("PurchaseToken");
    if let Some(var_786) = &input.purchase_token {
        scope_785.string(var_786);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_register_instance_tag_attribute_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RegisterInstanceTagAttributeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("IncludeAllTagsOfInstance");
    if let Some(var_788) = &input.include_all_tags_of_instance {
        scope_787.boolean(*var_788);
    }
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("InstanceTagKey");
    if let Some(var_790) = &input.instance_tag_keys {
        let mut list_792 = scope_789.start_list(true, Some("item"));
        for item_791 in var_790 {
            #[allow(unused_mut)]
            let mut entry_793 = list_792.entry();
            entry_793.string(item_791);
        }
        list_792.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_request_config_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetRequestConfigData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("AllocationStrategy");
    if let Some(var_795) = &input.allocation_strategy {
        scope_794.string(var_795.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("OnDemandAllocationStrategy");
    if let Some(var_797) = &input.on_demand_allocation_strategy {
        scope_796.string(var_797.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("SpotMaintenanceStrategies");
    if let Some(var_799) = &input.spot_maintenance_strategies {
        crate::query_ser::serialize_structure_crate_model_spot_maintenance_strategies(
            scope_798, var_799,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("ClientToken");
    if let Some(var_801) = &input.client_token {
        scope_800.string(var_801);
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("ExcessCapacityTerminationPolicy");
    if let Some(var_803) = &input.excess_capacity_termination_policy {
        scope_802.string(var_803.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("FulfilledCapacity");
    if let Some(var_805) = &input.fulfilled_capacity {
        scope_804.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_805).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("OnDemandFulfilledCapacity");
    if let Some(var_807) = &input.on_demand_fulfilled_capacity {
        scope_806.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_807).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("IamFleetRole");
    if let Some(var_809) = &input.iam_fleet_role {
        scope_808.string(var_809);
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("LaunchSpecifications");
    if let Some(var_811) = &input.launch_specifications {
        let mut list_813 = scope_810.start_list(true, Some("item"));
        for item_812 in var_811 {
            #[allow(unused_mut)]
            let mut entry_814 = list_813.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_launch_specification(
                entry_814, item_812,
            )?;
        }
        list_813.finish();
    }
    #[allow(unused_mut)]
    let mut scope_815 = writer.prefix("LaunchTemplateConfigs");
    if let Some(var_816) = &input.launch_template_configs {
        let mut list_818 = scope_815.start_list(true, Some("item"));
        for item_817 in var_816 {
            #[allow(unused_mut)]
            let mut entry_819 = list_818.entry();
            crate::query_ser::serialize_structure_crate_model_launch_template_config(
                entry_819, item_817,
            )?;
        }
        list_818.finish();
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("SpotPrice");
    if let Some(var_821) = &input.spot_price {
        scope_820.string(var_821);
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("TargetCapacity");
    if let Some(var_823) = &input.target_capacity {
        scope_822.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_823).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("OnDemandTargetCapacity");
    if let Some(var_825) = &input.on_demand_target_capacity {
        scope_824.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_825).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("OnDemandMaxTotalPrice");
    if let Some(var_827) = &input.on_demand_max_total_price {
        scope_826.string(var_827);
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("SpotMaxTotalPrice");
    if let Some(var_829) = &input.spot_max_total_price {
        scope_828.string(var_829);
    }
    #[allow(unused_mut)]
    let mut scope_830 = writer.prefix("TerminateInstancesWithExpiration");
    if let Some(var_831) = &input.terminate_instances_with_expiration {
        scope_830.boolean(*var_831);
    }
    #[allow(unused_mut)]
    let mut scope_832 = writer.prefix("Type");
    if let Some(var_833) = &input.r#type {
        scope_832.string(var_833.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_834 = writer.prefix("ValidFrom");
    if let Some(var_835) = &input.valid_from {
        scope_834.date_time(var_835, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_836 = writer.prefix("ValidUntil");
    if let Some(var_837) = &input.valid_until {
        scope_836.date_time(var_837, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_838 = writer.prefix("ReplaceUnhealthyInstances");
    if let Some(var_839) = &input.replace_unhealthy_instances {
        scope_838.boolean(*var_839);
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_841) = &input.instance_interruption_behavior {
        scope_840.string(var_841.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_842 = writer.prefix("LoadBalancersConfig");
    if let Some(var_843) = &input.load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_load_balancers_config(
            scope_842, var_843,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_844 = writer.prefix("InstancePoolsToUseCount");
    if let Some(var_845) = &input.instance_pools_to_use_count {
        scope_844.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_845).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("Context");
    if let Some(var_847) = &input.context {
        scope_846.string(var_847);
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("TargetCapacityUnitType");
    if let Some(var_849) = &input.target_capacity_unit_type {
        scope_848.string(var_849.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("TagSpecification");
    if let Some(var_851) = &input.tag_specifications {
        let mut list_853 = scope_850.start_list(true, Some("item"));
        for item_852 in var_851 {
            #[allow(unused_mut)]
            let mut entry_854 = list_853.entry();
            crate::query_ser::serialize_structure_crate_model_tag_specification(
                entry_854, item_852,
            )?;
        }
        list_853.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_request_spot_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RequestSpotLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_855 = writer.prefix("SecurityGroupId");
    if let Some(var_856) = &input.security_group_ids {
        let mut list_858 = scope_855.start_list(true, Some("item"));
        for item_857 in var_856 {
            #[allow(unused_mut)]
            let mut entry_859 = list_858.entry();
            entry_859.string(item_857);
        }
        list_858.finish();
    }
    #[allow(unused_mut)]
    let mut scope_860 = writer.prefix("SecurityGroup");
    if let Some(var_861) = &input.security_groups {
        let mut list_863 = scope_860.start_list(true, Some("item"));
        for item_862 in var_861 {
            #[allow(unused_mut)]
            let mut entry_864 = list_863.entry();
            entry_864.string(item_862);
        }
        list_863.finish();
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("AddressingType");
    if let Some(var_866) = &input.addressing_type {
        scope_865.string(var_866);
    }
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("BlockDeviceMapping");
    if let Some(var_868) = &input.block_device_mappings {
        let mut list_870 = scope_867.start_list(true, Some("item"));
        for item_869 in var_868 {
            #[allow(unused_mut)]
            let mut entry_871 = list_870.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_871, item_869,
            )?;
        }
        list_870.finish();
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("EbsOptimized");
    if let Some(var_873) = &input.ebs_optimized {
        scope_872.boolean(*var_873);
    }
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("IamInstanceProfile");
    if let Some(var_875) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_874, var_875,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("ImageId");
    if let Some(var_877) = &input.image_id {
        scope_876.string(var_877);
    }
    #[allow(unused_mut)]
    let mut scope_878 = writer.prefix("InstanceType");
    if let Some(var_879) = &input.instance_type {
        scope_878.string(var_879.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_880 = writer.prefix("KernelId");
    if let Some(var_881) = &input.kernel_id {
        scope_880.string(var_881);
    }
    #[allow(unused_mut)]
    let mut scope_882 = writer.prefix("KeyName");
    if let Some(var_883) = &input.key_name {
        scope_882.string(var_883);
    }
    #[allow(unused_mut)]
    let mut scope_884 = writer.prefix("Monitoring");
    if let Some(var_885) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_run_instances_monitoring_enabled(
            scope_884, var_885,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_886 = writer.prefix("NetworkInterface");
    if let Some(var_887) = &input.network_interfaces {
        let mut list_889 = scope_886.start_list(true, Some("item"));
        for item_888 in var_887 {
            #[allow(unused_mut)]
            let mut entry_890 = list_889.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_890, item_888)?;
        }
        list_889.finish();
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("Placement");
    if let Some(var_892) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_891, var_892)?;
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("RamdiskId");
    if let Some(var_894) = &input.ramdisk_id {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("SubnetId");
    if let Some(var_896) = &input.subnet_id {
        scope_895.string(var_896);
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("UserData");
    if let Some(var_898) = &input.user_data {
        scope_897.string(var_898);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_run_instances_monitoring_enabled(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::RunInstancesMonitoringEnabled,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("Enabled");
    if let Some(var_900) = &input.enabled {
        scope_899.boolean(*var_900);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Placement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("AvailabilityZone");
    if let Some(var_902) = &input.availability_zone {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("Affinity");
    if let Some(var_904) = &input.affinity {
        scope_903.string(var_904);
    }
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("GroupName");
    if let Some(var_906) = &input.group_name {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("PartitionNumber");
    if let Some(var_908) = &input.partition_number {
        scope_907.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_908).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("HostId");
    if let Some(var_910) = &input.host_id {
        scope_909.string(var_910);
    }
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("Tenancy");
    if let Some(var_912) = &input.tenancy {
        scope_911.string(var_912.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("SpreadDomain");
    if let Some(var_914) = &input.spread_domain {
        scope_913.string(var_914);
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("HostResourceGroupArn");
    if let Some(var_916) = &input.host_resource_group_arn {
        scope_915.string(var_916);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_network_interface_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceNetworkInterfaceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_918) = &input.associate_public_ip_address {
        scope_917.boolean(*var_918);
    }
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("DeleteOnTermination");
    if let Some(var_920) = &input.delete_on_termination {
        scope_919.boolean(*var_920);
    }
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("Description");
    if let Some(var_922) = &input.description {
        scope_921.string(var_922);
    }
    #[allow(unused_mut)]
    let mut scope_923 = writer.prefix("DeviceIndex");
    if let Some(var_924) = &input.device_index {
        scope_923.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_924).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("SecurityGroupId");
    if let Some(var_926) = &input.groups {
        let mut list_928 = scope_925.start_list(true, Some("SecurityGroupId"));
        for item_927 in var_926 {
            #[allow(unused_mut)]
            let mut entry_929 = list_928.entry();
            entry_929.string(item_927);
        }
        list_928.finish();
    }
    #[allow(unused_mut)]
    let mut scope_930 = writer.prefix("Ipv6AddressCount");
    if let Some(var_931) = &input.ipv6_address_count {
        scope_930.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_931).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_932 = writer.prefix("Ipv6Addresses");
    if let Some(var_933) = &input.ipv6_addresses {
        let mut list_935 = scope_932.start_list(true, Some("item"));
        for item_934 in var_933 {
            #[allow(unused_mut)]
            let mut entry_936 = list_935.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address(
                entry_936, item_934,
            )?;
        }
        list_935.finish();
    }
    #[allow(unused_mut)]
    let mut scope_937 = writer.prefix("NetworkInterfaceId");
    if let Some(var_938) = &input.network_interface_id {
        scope_937.string(var_938);
    }
    #[allow(unused_mut)]
    let mut scope_939 = writer.prefix("PrivateIpAddress");
    if let Some(var_940) = &input.private_ip_address {
        scope_939.string(var_940);
    }
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("PrivateIpAddresses");
    if let Some(var_942) = &input.private_ip_addresses {
        let mut list_944 = scope_941.start_list(true, Some("item"));
        for item_943 in var_942 {
            #[allow(unused_mut)]
            let mut entry_945 = list_944.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_945, item_943,
            )?;
        }
        list_944.finish();
    }
    #[allow(unused_mut)]
    let mut scope_946 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_947) = &input.secondary_private_ip_address_count {
        scope_946.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_947).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("SubnetId");
    if let Some(var_949) = &input.subnet_id {
        scope_948.string(var_949);
    }
    #[allow(unused_mut)]
    let mut scope_950 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_951) = &input.associate_carrier_ip_address {
        scope_950.boolean(*var_951);
    }
    #[allow(unused_mut)]
    let mut scope_952 = writer.prefix("InterfaceType");
    if let Some(var_953) = &input.interface_type {
        scope_952.string(var_953);
    }
    #[allow(unused_mut)]
    let mut scope_954 = writer.prefix("NetworkCardIndex");
    if let Some(var_955) = &input.network_card_index {
        scope_954.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_955).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("Ipv4Prefix");
    if let Some(var_957) = &input.ipv4_prefixes {
        let mut list_959 = scope_956.start_list(true, Some("item"));
        for item_958 in var_957 {
            #[allow(unused_mut)]
            let mut entry_960 = list_959.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_960, item_958,
            )?;
        }
        list_959.finish();
    }
    #[allow(unused_mut)]
    let mut scope_961 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_962) = &input.ipv4_prefix_count {
        scope_961.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_962).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("Ipv6Prefix");
    if let Some(var_964) = &input.ipv6_prefixes {
        let mut list_966 = scope_963.start_list(true, Some("item"));
        for item_965 in var_964 {
            #[allow(unused_mut)]
            let mut entry_967 = list_966.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_967, item_965,
            )?;
        }
        list_966.finish();
    }
    #[allow(unused_mut)]
    let mut scope_968 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_969) = &input.ipv6_prefix_count {
        scope_968.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_969).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_gpu_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticGpuSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_970 = writer.prefix("Type");
    if let Some(var_971) = &input.r#type {
        scope_970.string(var_971);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_972 = writer.prefix("Type");
    if let Some(var_973) = &input.r#type {
        scope_972.string(var_973);
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("Count");
    if let Some(var_975) = &input.count {
        scope_974.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_975).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("LaunchTemplateId");
    if let Some(var_977) = &input.launch_template_id {
        scope_976.string(var_977);
    }
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("LaunchTemplateName");
    if let Some(var_979) = &input.launch_template_name {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("Version");
    if let Some(var_981) = &input.version {
        scope_980.string(var_981);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_982 = writer.prefix("MarketType");
    if let Some(var_983) = &input.market_type {
        scope_982.string(var_983.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_984 = writer.prefix("SpotOptions");
    if let Some(var_985) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_spot_market_options(scope_984, var_985)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_credit_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreditSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_986 = writer.prefix("CpuCredits");
    if let Some(var_987) = &input.cpu_credits {
        scope_986.string(var_987);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_988 = writer.prefix("CoreCount");
    if let Some(var_989) = &input.core_count {
        scope_988.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_989).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_990 = writer.prefix("ThreadsPerCore");
    if let Some(var_991) = &input.threads_per_core {
        scope_990.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_991).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::HibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_992 = writer.prefix("Configured");
    if let Some(var_993) = &input.configured {
        scope_992.boolean(*var_993);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_994 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_995) = &input.license_configuration_arn {
        scope_994.string(var_995);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("HttpTokens");
    if let Some(var_997) = &input.http_tokens {
        scope_996.string(var_997.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_999) = &input.http_put_response_hop_limit {
        scope_998.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_999).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("HttpEndpoint");
    if let Some(var_1001) = &input.http_endpoint {
        scope_1000.string(var_1001.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1003) = &input.http_protocol_ipv6 {
        scope_1002.string(var_1003.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1005) = &input.instance_metadata_tags {
        scope_1004.string(var_1005.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("Enabled");
    if let Some(var_1007) = &input.enabled {
        scope_1006.boolean(*var_1007);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1008 = writer.prefix("HostnameType");
    if let Some(var_1009) = &input.hostname_type {
        scope_1008.string(var_1009.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1010 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1011) = &input.enable_resource_name_dns_a_record {
        scope_1010.boolean(*var_1011);
    }
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1013) = &input.enable_resource_name_dns_aaaa_record {
        scope_1012.boolean(*var_1013);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1015) = &input.block_device_mappings {
        let mut list_1017 = scope_1014.start_list(true, Some("BlockDeviceMapping"));
        for item_1016 in var_1015 {
            #[allow(unused_mut)]
            let mut entry_1018 = list_1017.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_block_device_mapping(entry_1018, item_1016)?;
        }
        list_1017.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1019 = writer.prefix("EbsOptimized");
    if let Some(var_1020) = &input.ebs_optimized {
        scope_1019.boolean(*var_1020);
    }
    #[allow(unused_mut)]
    let mut scope_1021 = writer.prefix("IamInstanceProfile");
    if let Some(var_1022) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
            scope_1021, var_1022,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1023 = writer.prefix("ImageId");
    if let Some(var_1024) = &input.image_id {
        scope_1023.string(var_1024);
    }
    #[allow(unused_mut)]
    let mut scope_1025 = writer.prefix("InstanceType");
    if let Some(var_1026) = &input.instance_type {
        scope_1025.string(var_1026);
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("KernelId");
    if let Some(var_1028) = &input.kernel_id {
        scope_1027.string(var_1028);
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("KeyName");
    if let Some(var_1030) = &input.key_name {
        scope_1029.string(var_1030);
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("Monitoring");
    if let Some(var_1032) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_monitoring(
            scope_1031, var_1032,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("NetworkInterface");
    if let Some(var_1034) = &input.network_interfaces {
        let mut list_1036 = scope_1033.start_list(true, Some("NetworkInterface"));
        for item_1035 in var_1034 {
            #[allow(unused_mut)]
            let mut entry_1037 = list_1036.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_network_interface(entry_1037, item_1035)?;
        }
        list_1036.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1038 = writer.prefix("Placement");
    if let Some(var_1039) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_placement(
            scope_1038, var_1039,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1040 = writer.prefix("RamdiskId");
    if let Some(var_1041) = &input.ramdisk_id {
        scope_1040.string(var_1041);
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("SecurityGroupId");
    if let Some(var_1043) = &input.security_group_ids {
        let mut list_1045 = scope_1042.start_list(true, Some("SecurityGroupId"));
        for item_1044 in var_1043 {
            #[allow(unused_mut)]
            let mut entry_1046 = list_1045.entry();
            entry_1046.string(item_1044);
        }
        list_1045.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1047 = writer.prefix("SubnetId");
    if let Some(var_1048) = &input.subnet_id {
        scope_1047.string(var_1048);
    }
    #[allow(unused_mut)]
    let mut scope_1049 = writer.prefix("UserData");
    if let Some(var_1050) = &input.user_data {
        scope_1049.string(var_1050);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_description(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleDescription,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("SecurityGroupRuleId");
    if let Some(var_1052) = &input.security_group_rule_id {
        scope_1051.string(var_1052);
    }
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("Description");
    if let Some(var_1054) = &input.description {
        scope_1053.string(var_1054);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ip_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IpRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("CidrIp");
    if let Some(var_1056) = &input.cidr_ip {
        scope_1055.string(var_1056);
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("Description");
    if let Some(var_1058) = &input.description {
        scope_1057.string(var_1058);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ipv6_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Ipv6Range,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1059 = writer.prefix("CidrIpv6");
    if let Some(var_1060) = &input.cidr_ipv6 {
        scope_1059.string(var_1060);
    }
    #[allow(unused_mut)]
    let mut scope_1061 = writer.prefix("Description");
    if let Some(var_1062) = &input.description {
        scope_1061.string(var_1062);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_prefix_list_id(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PrefixListId,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1063 = writer.prefix("Description");
    if let Some(var_1064) = &input.description {
        scope_1063.string(var_1064);
    }
    #[allow(unused_mut)]
    let mut scope_1065 = writer.prefix("PrefixListId");
    if let Some(var_1066) = &input.prefix_list_id {
        scope_1065.string(var_1066);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_id_group_pair(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserIdGroupPair,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1067 = writer.prefix("Description");
    if let Some(var_1068) = &input.description {
        scope_1067.string(var_1068);
    }
    #[allow(unused_mut)]
    let mut scope_1069 = writer.prefix("GroupId");
    if let Some(var_1070) = &input.group_id {
        scope_1069.string(var_1070);
    }
    #[allow(unused_mut)]
    let mut scope_1071 = writer.prefix("GroupName");
    if let Some(var_1072) = &input.group_name {
        scope_1071.string(var_1072);
    }
    #[allow(unused_mut)]
    let mut scope_1073 = writer.prefix("PeeringStatus");
    if let Some(var_1074) = &input.peering_status {
        scope_1073.string(var_1074);
    }
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("UserId");
    if let Some(var_1076) = &input.user_id {
        scope_1075.string(var_1076);
    }
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("VpcId");
    if let Some(var_1078) = &input.vpc_id {
        scope_1077.string(var_1078);
    }
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("VpcPeeringConnectionId");
    if let Some(var_1080) = &input.vpc_peering_connection_id {
        scope_1079.string(var_1080);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_s3_storage(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::S3Storage,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("AWSAccessKeyId");
    if let Some(var_1082) = &input.aws_access_key_id {
        scope_1081.string(var_1082);
    }
    #[allow(unused_mut)]
    let mut scope_1083 = writer.prefix("Bucket");
    if let Some(var_1084) = &input.bucket {
        scope_1083.string(var_1084);
    }
    #[allow(unused_mut)]
    let mut scope_1085 = writer.prefix("Prefix");
    if let Some(var_1086) = &input.prefix {
        scope_1085.string(var_1086);
    }
    #[allow(unused_mut)]
    let mut scope_1087 = writer.prefix("UploadPolicy");
    if let Some(var_1088) = &input.upload_policy {
        scope_1087.string(&aws_smithy_types::base64::encode(var_1088));
    }
    #[allow(unused_mut)]
    let mut scope_1089 = writer.prefix("UploadPolicySignature");
    if let Some(var_1090) = &input.upload_policy_signature {
        scope_1089.string(var_1090);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_directory_service_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DirectoryServiceAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1091 = writer.prefix("DirectoryId");
    if let Some(var_1092) = &input.directory_id {
        scope_1091.string(var_1092);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_certificate_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CertificateAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1093 = writer.prefix("ClientRootCertificateChainArn");
    if let Some(var_1094) = &input.client_root_certificate_chain_arn {
        scope_1093.string(var_1094);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_federated_authentication_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FederatedAuthenticationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1095 = writer.prefix("SAMLProviderArn");
    if let Some(var_1096) = &input.saml_provider_arn {
        scope_1095.string(var_1096);
    }
    #[allow(unused_mut)]
    let mut scope_1097 = writer.prefix("SelfServiceSAMLProviderArn");
    if let Some(var_1098) = &input.self_service_saml_provider_arn {
        scope_1097.string(var_1098);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_maintenance_strategies_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotMaintenanceStrategiesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1099 = writer.prefix("CapacityRebalance");
    if let Some(var_1100) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
            scope_1099, var_1100,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1101 = writer.prefix("UsageStrategy");
    if let Some(var_1102) = &input.usage_strategy {
        scope_1101.string(var_1102.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1103 = writer.prefix("LaunchTemplateId");
    if let Some(var_1104) = &input.launch_template_id {
        scope_1103.string(var_1104);
    }
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("LaunchTemplateName");
    if let Some(var_1106) = &input.launch_template_name {
        scope_1105.string(var_1106);
    }
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("Version");
    if let Some(var_1108) = &input.version {
        scope_1107.string(var_1108);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_overrides_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateOverridesRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("InstanceType");
    if let Some(var_1110) = &input.instance_type {
        scope_1109.string(var_1110.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("MaxPrice");
    if let Some(var_1112) = &input.max_price {
        scope_1111.string(var_1112);
    }
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("SubnetId");
    if let Some(var_1114) = &input.subnet_id {
        scope_1113.string(var_1114);
    }
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("AvailabilityZone");
    if let Some(var_1116) = &input.availability_zone {
        scope_1115.string(var_1116);
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("WeightedCapacity");
    if let Some(var_1118) = &input.weighted_capacity {
        scope_1117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("Priority");
    if let Some(var_1120) = &input.priority {
        scope_1119.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1120).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("Placement");
    if let Some(var_1122) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_placement(scope_1121, var_1122)?;
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("InstanceRequirements");
    if let Some(var_1124) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements_request(
            scope_1123, var_1124,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_block_device(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsBlockDevice,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("DeleteOnTermination");
    if let Some(var_1126) = &input.delete_on_termination {
        scope_1125.boolean(*var_1126);
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("Iops");
    if let Some(var_1128) = &input.iops {
        scope_1127.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1128).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("SnapshotId");
    if let Some(var_1130) = &input.snapshot_id {
        scope_1129.string(var_1130);
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("VolumeSize");
    if let Some(var_1132) = &input.volume_size {
        scope_1131.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1132).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("VolumeType");
    if let Some(var_1134) = &input.volume_type {
        scope_1133.string(var_1134.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("KmsKeyId");
    if let Some(var_1136) = &input.kms_key_id {
        scope_1135.string(var_1136);
    }
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("Throughput");
    if let Some(var_1138) = &input.throughput {
        scope_1137.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1138).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("OutpostArn");
    if let Some(var_1140) = &input.outpost_arn {
        scope_1139.string(var_1140);
    }
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("Encrypted");
    if let Some(var_1142) = &input.encrypted {
        scope_1141.boolean(*var_1142);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_iam_instance_profile_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateIamInstanceProfileSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("Arn");
    if let Some(var_1144) = &input.arn {
        scope_1143.string(var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("Name");
    if let Some(var_1146) = &input.name {
        scope_1145.string(var_1146);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_block_device_mapping_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateBlockDeviceMappingRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("DeviceName");
    if let Some(var_1148) = &input.device_name {
        scope_1147.string(var_1148);
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("VirtualName");
    if let Some(var_1150) = &input.virtual_name {
        scope_1149.string(var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("Ebs");
    if let Some(var_1152) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_launch_template_ebs_block_device_request(
            scope_1151, var_1152,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("NoDevice");
    if let Some(var_1154) = &input.no_device {
        scope_1153.string(var_1154);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_network_interface_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceNetworkInterfaceSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("AssociateCarrierIpAddress");
    if let Some(var_1156) = &input.associate_carrier_ip_address {
        scope_1155.boolean(*var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1158) = &input.associate_public_ip_address {
        scope_1157.boolean(*var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("DeleteOnTermination");
    if let Some(var_1160) = &input.delete_on_termination {
        scope_1159.boolean(*var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("Description");
    if let Some(var_1162) = &input.description {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("DeviceIndex");
    if let Some(var_1164) = &input.device_index {
        scope_1163.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1164).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("SecurityGroupId");
    if let Some(var_1166) = &input.groups {
        let mut list_1168 = scope_1165.start_list(true, Some("SecurityGroupId"));
        for item_1167 in var_1166 {
            #[allow(unused_mut)]
            let mut entry_1169 = list_1168.entry();
            entry_1169.string(item_1167);
        }
        list_1168.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1170 = writer.prefix("InterfaceType");
    if let Some(var_1171) = &input.interface_type {
        scope_1170.string(var_1171);
    }
    #[allow(unused_mut)]
    let mut scope_1172 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1173) = &input.ipv6_address_count {
        scope_1172.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1173).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1174 = writer.prefix("Ipv6Addresses");
    if let Some(var_1175) = &input.ipv6_addresses {
        let mut list_1177 = scope_1174.start_list(true, Some("InstanceIpv6Address"));
        for item_1176 in var_1175 {
            #[allow(unused_mut)]
            let mut entry_1178 = list_1177.entry();
            crate::query_ser::serialize_structure_crate_model_instance_ipv6_address_request(
                entry_1178, item_1176,
            )?;
        }
        list_1177.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1179 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1180) = &input.network_interface_id {
        scope_1179.string(var_1180);
    }
    #[allow(unused_mut)]
    let mut scope_1181 = writer.prefix("PrivateIpAddress");
    if let Some(var_1182) = &input.private_ip_address {
        scope_1181.string(var_1182);
    }
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("PrivateIpAddresses");
    if let Some(var_1184) = &input.private_ip_addresses {
        let mut list_1186 = scope_1183.start_list(true, Some("item"));
        for item_1185 in var_1184 {
            #[allow(unused_mut)]
            let mut entry_1187 = list_1186.entry();
            crate::query_ser::serialize_structure_crate_model_private_ip_address_specification(
                entry_1187, item_1185,
            )?;
        }
        list_1186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1188 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1189) = &input.secondary_private_ip_address_count {
        scope_1188.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1189).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1190 = writer.prefix("SubnetId");
    if let Some(var_1191) = &input.subnet_id {
        scope_1190.string(var_1191);
    }
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("NetworkCardIndex");
    if let Some(var_1193) = &input.network_card_index {
        scope_1192.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1193).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1194 = writer.prefix("Ipv4Prefix");
    if let Some(var_1195) = &input.ipv4_prefixes {
        let mut list_1197 = scope_1194.start_list(true, Some("item"));
        for item_1196 in var_1195 {
            #[allow(unused_mut)]
            let mut entry_1198 = list_1197.entry();
            crate::query_ser::serialize_structure_crate_model_ipv4_prefix_specification_request(
                entry_1198, item_1196,
            )?;
        }
        list_1197.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1199 = writer.prefix("Ipv4PrefixCount");
    if let Some(var_1200) = &input.ipv4_prefix_count {
        scope_1199.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1200).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1201 = writer.prefix("Ipv6Prefix");
    if let Some(var_1202) = &input.ipv6_prefixes {
        let mut list_1204 = scope_1201.start_list(true, Some("item"));
        for item_1203 in var_1202 {
            #[allow(unused_mut)]
            let mut entry_1205 = list_1204.entry();
            crate::query_ser::serialize_structure_crate_model_ipv6_prefix_specification_request(
                entry_1205, item_1203,
            )?;
        }
        list_1204.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("Ipv6PrefixCount");
    if let Some(var_1207) = &input.ipv6_prefix_count {
        scope_1206.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1207).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_templates_monitoring_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatesMonitoringRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("Enabled");
    if let Some(var_1209) = &input.enabled {
        scope_1208.boolean(*var_1209);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_placement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePlacementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("AvailabilityZone");
    if let Some(var_1211) = &input.availability_zone {
        scope_1210.string(var_1211);
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("Affinity");
    if let Some(var_1213) = &input.affinity {
        scope_1212.string(var_1213);
    }
    #[allow(unused_mut)]
    let mut scope_1214 = writer.prefix("GroupName");
    if let Some(var_1215) = &input.group_name {
        scope_1214.string(var_1215);
    }
    #[allow(unused_mut)]
    let mut scope_1216 = writer.prefix("HostId");
    if let Some(var_1217) = &input.host_id {
        scope_1216.string(var_1217);
    }
    #[allow(unused_mut)]
    let mut scope_1218 = writer.prefix("Tenancy");
    if let Some(var_1219) = &input.tenancy {
        scope_1218.string(var_1219.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1220 = writer.prefix("SpreadDomain");
    if let Some(var_1221) = &input.spread_domain {
        scope_1220.string(var_1221);
    }
    #[allow(unused_mut)]
    let mut scope_1222 = writer.prefix("HostResourceGroupArn");
    if let Some(var_1223) = &input.host_resource_group_arn {
        scope_1222.string(var_1223);
    }
    #[allow(unused_mut)]
    let mut scope_1224 = writer.prefix("PartitionNumber");
    if let Some(var_1225) = &input.partition_number {
        scope_1224.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1225).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_tag_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateTagSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1226 = writer.prefix("ResourceType");
    if let Some(var_1227) = &input.resource_type {
        scope_1226.string(var_1227.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1228 = writer.prefix("Tag");
    if let Some(var_1229) = &input.tags {
        let mut list_1231 = scope_1228.start_list(true, Some("item"));
        for item_1230 in var_1229 {
            #[allow(unused_mut)]
            let mut entry_1232 = list_1231.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1232, item_1230)?;
        }
        list_1231.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_elastic_inference_accelerator(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateElasticInferenceAccelerator,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("Type");
    if let Some(var_1234) = &input.r#type {
        scope_1233.string(var_1234);
    }
    #[allow(unused_mut)]
    let mut scope_1235 = writer.prefix("Count");
    if let Some(var_1236) = &input.count {
        scope_1235.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1236).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1237 = writer.prefix("MarketType");
    if let Some(var_1238) = &input.market_type {
        scope_1237.string(var_1238.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1239 = writer.prefix("SpotOptions");
    if let Some(var_1240) = &input.spot_options {
        crate::query_ser::serialize_structure_crate_model_launch_template_spot_market_options_request(scope_1239, var_1240)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_cpu_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCpuOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("CoreCount");
    if let Some(var_1242) = &input.core_count {
        scope_1241.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1242).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1243 = writer.prefix("ThreadsPerCore");
    if let Some(var_1244) = &input.threads_per_core {
        scope_1243.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1244).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_capacity_reservation_specification_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateCapacityReservationSpecificationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1245 = writer.prefix("CapacityReservationPreference");
    if let Some(var_1246) = &input.capacity_reservation_preference {
        scope_1245.string(var_1246.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1247 = writer.prefix("CapacityReservationTarget");
    if let Some(var_1248) = &input.capacity_reservation_target {
        crate::query_ser::serialize_structure_crate_model_capacity_reservation_target(
            scope_1247, var_1248,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_license_configuration_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateLicenseConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1249 = writer.prefix("LicenseConfigurationArn");
    if let Some(var_1250) = &input.license_configuration_arn {
        scope_1249.string(var_1250);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_hibernation_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateHibernationOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("Configured");
    if let Some(var_1252) = &input.configured {
        scope_1251.boolean(*var_1252);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_instance_metadata_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateInstanceMetadataOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("HttpTokens");
    if let Some(var_1254) = &input.http_tokens {
        scope_1253.string(var_1254.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("HttpPutResponseHopLimit");
    if let Some(var_1256) = &input.http_put_response_hop_limit {
        scope_1255.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1256).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("HttpEndpoint");
    if let Some(var_1258) = &input.http_endpoint {
        scope_1257.string(var_1258.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("HttpProtocolIpv6");
    if let Some(var_1260) = &input.http_protocol_ipv6 {
        scope_1259.string(var_1260.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("InstanceMetadataTags");
    if let Some(var_1262) = &input.instance_metadata_tags {
        scope_1261.string(var_1262.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_enclave_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEnclaveOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("Enabled");
    if let Some(var_1264) = &input.enabled {
        scope_1263.boolean(*var_1264);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_private_dns_name_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplatePrivateDnsNameOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("HostnameType");
    if let Some(var_1266) = &input.hostname_type {
        scope_1265.string(var_1266.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("EnableResourceNameDnsARecord");
    if let Some(var_1268) = &input.enable_resource_name_dns_a_record {
        scope_1267.boolean(*var_1268);
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("EnableResourceNameDnsAAAARecord");
    if let Some(var_1270) = &input.enable_resource_name_dns_aaaa_record {
        scope_1269.boolean(*var_1270);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_path_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PathStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1271 = writer.prefix("PacketHeaderStatement");
    if let Some(var_1272) = &input.packet_header_statement {
        crate::query_ser::serialize_structure_crate_model_packet_header_statement_request(
            scope_1271, var_1272,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1273 = writer.prefix("ResourceStatement");
    if let Some(var_1274) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1273, var_1274,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_through_resources_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ThroughResourcesStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1275 = writer.prefix("ResourceStatement");
    if let Some(var_1276) = &input.resource_statement {
        crate::query_ser::serialize_structure_crate_model_resource_statement_request(
            scope_1275, var_1276,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_vpn_tunnel_options_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VpnTunnelOptionsSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1277 = writer.prefix("TunnelInsideCidr");
    if let Some(var_1278) = &input.tunnel_inside_cidr {
        scope_1277.string(var_1278);
    }
    #[allow(unused_mut)]
    let mut scope_1279 = writer.prefix("TunnelInsideIpv6Cidr");
    if let Some(var_1280) = &input.tunnel_inside_ipv6_cidr {
        scope_1279.string(var_1280);
    }
    #[allow(unused_mut)]
    let mut scope_1281 = writer.prefix("PreSharedKey");
    if let Some(var_1282) = &input.pre_shared_key {
        scope_1281.string(var_1282);
    }
    #[allow(unused_mut)]
    let mut scope_1283 = writer.prefix("Phase1LifetimeSeconds");
    if let Some(var_1284) = &input.phase1_lifetime_seconds {
        scope_1283.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1284).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1285 = writer.prefix("Phase2LifetimeSeconds");
    if let Some(var_1286) = &input.phase2_lifetime_seconds {
        scope_1285.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1286).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1287 = writer.prefix("RekeyMarginTimeSeconds");
    if let Some(var_1288) = &input.rekey_margin_time_seconds {
        scope_1287.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1288).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1289 = writer.prefix("RekeyFuzzPercentage");
    if let Some(var_1290) = &input.rekey_fuzz_percentage {
        scope_1289.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1290).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1291 = writer.prefix("ReplayWindowSize");
    if let Some(var_1292) = &input.replay_window_size {
        scope_1291.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1292).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1293 = writer.prefix("DPDTimeoutSeconds");
    if let Some(var_1294) = &input.dpd_timeout_seconds {
        scope_1293.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1294).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1295 = writer.prefix("DPDTimeoutAction");
    if let Some(var_1296) = &input.dpd_timeout_action {
        scope_1295.string(var_1296);
    }
    #[allow(unused_mut)]
    let mut scope_1297 = writer.prefix("Phase1EncryptionAlgorithm");
    if let Some(var_1298) = &input.phase1_encryption_algorithms {
        let mut list_1300 = scope_1297.start_list(true, Some("item"));
        for item_1299 in var_1298 {
            #[allow(unused_mut)]
            let mut entry_1301 = list_1300.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(entry_1301, item_1299)?;
        }
        list_1300.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1302 = writer.prefix("Phase2EncryptionAlgorithm");
    if let Some(var_1303) = &input.phase2_encryption_algorithms {
        let mut list_1305 = scope_1302.start_list(true, Some("item"));
        for item_1304 in var_1303 {
            #[allow(unused_mut)]
            let mut entry_1306 = list_1305.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(entry_1306, item_1304)?;
        }
        list_1305.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1307 = writer.prefix("Phase1IntegrityAlgorithm");
    if let Some(var_1308) = &input.phase1_integrity_algorithms {
        let mut list_1310 = scope_1307.start_list(true, Some("item"));
        for item_1309 in var_1308 {
            #[allow(unused_mut)]
            let mut entry_1311 = list_1310.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(entry_1311, item_1309)?;
        }
        list_1310.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1312 = writer.prefix("Phase2IntegrityAlgorithm");
    if let Some(var_1313) = &input.phase2_integrity_algorithms {
        let mut list_1315 = scope_1312.start_list(true, Some("item"));
        for item_1314 in var_1313 {
            #[allow(unused_mut)]
            let mut entry_1316 = list_1315.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(entry_1316, item_1314)?;
        }
        list_1315.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1317 = writer.prefix("Phase1DHGroupNumber");
    if let Some(var_1318) = &input.phase1_dh_group_numbers {
        let mut list_1320 = scope_1317.start_list(true, Some("item"));
        for item_1319 in var_1318 {
            #[allow(unused_mut)]
            let mut entry_1321 = list_1320.entry();
            crate::query_ser::serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(entry_1321, item_1319)?;
        }
        list_1320.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("Phase2DHGroupNumber");
    if let Some(var_1323) = &input.phase2_dh_group_numbers {
        let mut list_1325 = scope_1322.start_list(true, Some("item"));
        for item_1324 in var_1323 {
            #[allow(unused_mut)]
            let mut entry_1326 = list_1325.entry();
            crate::query_ser::serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(entry_1326, item_1324)?;
        }
        list_1325.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("IKEVersion");
    if let Some(var_1328) = &input.ike_versions {
        let mut list_1330 = scope_1327.start_list(true, Some("item"));
        for item_1329 in var_1328 {
            #[allow(unused_mut)]
            let mut entry_1331 = list_1330.entry();
            crate::query_ser::serialize_structure_crate_model_ike_versions_request_list_value(
                entry_1331, item_1329,
            )?;
        }
        list_1330.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1332 = writer.prefix("StartupAction");
    if let Some(var_1333) = &input.startup_action {
        scope_1332.string(var_1333);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_athena_integration(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AthenaIntegration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1334 = writer.prefix("IntegrationResultS3DestinationArn");
    if let Some(var_1335) = &input.integration_result_s3_destination_arn {
        scope_1334.string(var_1335);
    }
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("PartitionLoadFrequency");
    if let Some(var_1337) = &input.partition_load_frequency {
        scope_1336.string(var_1337.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1338 = writer.prefix("PartitionStartDate");
    if let Some(var_1339) = &input.partition_start_date {
        scope_1338.date_time(var_1339, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1340 = writer.prefix("PartitionEndDate");
    if let Some(var_1341) = &input.partition_end_date {
        scope_1340.date_time(var_1341, aws_smithy_types::date_time::Format::DateTime)?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRangeRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1342 = writer.prefix("Min");
    if let Some(var_1343) = &input.min {
        scope_1342.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1343).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1344 = writer.prefix("Max");
    if let Some(var_1345) = &input.max {
        scope_1344.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1345).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1346 = writer.prefix("Min");
    if let Some(var_1347) = &input.min {
        scope_1346.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1347).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1348 = writer.prefix("Max");
    if let Some(var_1349) = &input.max {
        scope_1348.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1349).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpuRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1350 = writer.prefix("Min");
    if let Some(var_1351) = &input.min {
        scope_1350.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1351).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1352 = writer.prefix("Max");
    if let Some(var_1353) = &input.max {
        scope_1352.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1353).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("Min");
    if let Some(var_1355) = &input.min {
        scope_1354.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1355).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1356 = writer.prefix("Max");
    if let Some(var_1357) = &input.max {
        scope_1356.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1357).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGbRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1358 = writer.prefix("Min");
    if let Some(var_1359) = &input.min {
        scope_1358.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1359).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("Max");
    if let Some(var_1361) = &input.max {
        scope_1360.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1361).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbpsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("Min");
    if let Some(var_1363) = &input.min {
        scope_1362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1364 = writer.prefix("Max");
    if let Some(var_1365) = &input.max {
        scope_1364.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1365).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCountRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1366 = writer.prefix("Min");
    if let Some(var_1367) = &input.min {
        scope_1366.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1367).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("Max");
    if let Some(var_1369) = &input.max {
        scope_1368.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1369).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiBRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("Min");
    if let Some(var_1371) = &input.min {
        scope_1370.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1371).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("Max");
    if let Some(var_1373) = &input.max {
        scope_1372.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1373).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_bucket(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserBucket,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("S3Bucket");
    if let Some(var_1375) = &input.s3_bucket {
        scope_1374.string(var_1375);
    }
    #[allow(unused_mut)]
    let mut scope_1376 = writer.prefix("S3Key");
    if let Some(var_1377) = &input.s3_key {
        scope_1376.string(var_1377);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_user_data(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::UserData,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1378 = writer.prefix("Data");
    if let Some(var_1379) = &input.data {
        scope_1378.string(var_1379);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_permission_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadPermissionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1380 = writer.prefix("Group");
    if let Some(var_1381) = &input.group {
        scope_1380.string(var_1381.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1382 = writer.prefix("UserId");
    if let Some(var_1383) = &input.user_id {
        scope_1382.string(var_1383);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchPermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1384 = writer.prefix("Group");
    if let Some(var_1385) = &input.group {
        scope_1384.string(var_1385.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1386 = writer.prefix("UserId");
    if let Some(var_1387) = &input.user_id {
        scope_1386.string(var_1387);
    }
    #[allow(unused_mut)]
    let mut scope_1388 = writer.prefix("OrganizationArn");
    if let Some(var_1389) = &input.organization_arn {
        scope_1388.string(var_1389);
    }
    #[allow(unused_mut)]
    let mut scope_1390 = writer.prefix("OrganizationalUnitArn");
    if let Some(var_1391) = &input.organizational_unit_arn {
        scope_1390.string(var_1391);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ebs_instance_block_device_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::EbsInstanceBlockDeviceSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1392 = writer.prefix("DeleteOnTermination");
    if let Some(var_1393) = &input.delete_on_termination {
        scope_1392.boolean(*var_1393);
    }
    #[allow(unused_mut)]
    let mut scope_1394 = writer.prefix("VolumeId");
    if let Some(var_1395) = &input.volume_id {
        scope_1394.string(var_1395);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_capacity_reservation_target(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CapacityReservationTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1396 = writer.prefix("CapacityReservationId");
    if let Some(var_1397) = &input.capacity_reservation_id {
        scope_1396.string(var_1397);
    }
    #[allow(unused_mut)]
    let mut scope_1398 = writer.prefix("CapacityReservationResourceGroupArn");
    if let Some(var_1399) = &input.capacity_reservation_resource_group_arn {
        scope_1398.string(var_1399);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_security_group_rule_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SecurityGroupRuleRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1400 = writer.prefix("IpProtocol");
    if let Some(var_1401) = &input.ip_protocol {
        scope_1400.string(var_1401);
    }
    #[allow(unused_mut)]
    let mut scope_1402 = writer.prefix("FromPort");
    if let Some(var_1403) = &input.from_port {
        scope_1402.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1403).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1404 = writer.prefix("ToPort");
    if let Some(var_1405) = &input.to_port {
        scope_1404.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1405).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1406 = writer.prefix("CidrIpv4");
    if let Some(var_1407) = &input.cidr_ipv4 {
        scope_1406.string(var_1407);
    }
    #[allow(unused_mut)]
    let mut scope_1408 = writer.prefix("CidrIpv6");
    if let Some(var_1409) = &input.cidr_ipv6 {
        scope_1408.string(var_1409);
    }
    #[allow(unused_mut)]
    let mut scope_1410 = writer.prefix("PrefixListId");
    if let Some(var_1411) = &input.prefix_list_id {
        scope_1410.string(var_1411);
    }
    #[allow(unused_mut)]
    let mut scope_1412 = writer.prefix("ReferencedGroupId");
    if let Some(var_1413) = &input.referenced_group_id {
        scope_1412.string(var_1413);
    }
    #[allow(unused_mut)]
    let mut scope_1414 = writer.prefix("Description");
    if let Some(var_1415) = &input.description {
        scope_1414.string(var_1415);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_create_volume_permission(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::CreateVolumePermission,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1416 = writer.prefix("Group");
    if let Some(var_1417) = &input.group {
        scope_1416.string(var_1417.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1418 = writer.prefix("UserId");
    if let Some(var_1419) = &input.user_id {
        scope_1418.string(var_1419);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_launch_template_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetLaunchTemplateSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1420 = writer.prefix("LaunchTemplateId");
    if let Some(var_1421) = &input.launch_template_id {
        scope_1420.string(var_1421);
    }
    #[allow(unused_mut)]
    let mut scope_1422 = writer.prefix("LaunchTemplateName");
    if let Some(var_1423) = &input.launch_template_name {
        scope_1422.string(var_1423);
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("Version");
    if let Some(var_1425) = &input.version {
        scope_1424.string(var_1425);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_overrides(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateOverrides,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("InstanceType");
    if let Some(var_1427) = &input.instance_type {
        scope_1426.string(var_1427.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("SpotPrice");
    if let Some(var_1429) = &input.spot_price {
        scope_1428.string(var_1429);
    }
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("SubnetId");
    if let Some(var_1431) = &input.subnet_id {
        scope_1430.string(var_1431);
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("AvailabilityZone");
    if let Some(var_1433) = &input.availability_zone {
        scope_1432.string(var_1433);
    }
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("WeightedCapacity");
    if let Some(var_1435) = &input.weighted_capacity {
        scope_1434.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1435).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("Priority");
    if let Some(var_1437) = &input.priority {
        scope_1436.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1437).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1438 = writer.prefix("InstanceRequirements");
    if let Some(var_1439) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1438, var_1439,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1440 = writer.prefix("Value");
    if let Some(var_1441) = &input.value {
        scope_1440.string(var_1441);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_encryption_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2EncryptionAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("Value");
    if let Some(var_1443) = &input.value {
        scope_1442.string(var_1443);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("Value");
    if let Some(var_1445) = &input.value {
        scope_1444.string(var_1445);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_integrity_algorithms_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2IntegrityAlgorithmsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1446 = writer.prefix("Value");
    if let Some(var_1447) = &input.value {
        scope_1446.string(var_1447);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase1_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase1DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1448 = writer.prefix("Value");
    if let Some(var_1449) = &input.value {
        scope_1448.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1449).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_phase2_dh_group_numbers_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Phase2DhGroupNumbersRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1450 = writer.prefix("Value");
    if let Some(var_1451) = &input.value {
        scope_1450.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1451).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_ike_versions_request_list_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::IkeVersionsRequestListValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1452 = writer.prefix("Value");
    if let Some(var_1453) = &input.value {
        scope_1452.string(var_1453);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_maintenance_strategies(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMaintenanceStrategies,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1454 = writer.prefix("CapacityRebalance");
    if let Some(var_1455) = &input.capacity_rebalance {
        crate::query_ser::serialize_structure_crate_model_spot_capacity_rebalance(
            scope_1454, var_1455,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_launch_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetLaunchSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1456 = writer.prefix("GroupSet");
    if let Some(var_1457) = &input.security_groups {
        let mut list_1459 = scope_1456.start_list(true, Some("item"));
        for item_1458 in var_1457 {
            #[allow(unused_mut)]
            let mut entry_1460 = list_1459.entry();
            crate::query_ser::serialize_structure_crate_model_group_identifier(
                entry_1460, item_1458,
            )?;
        }
        list_1459.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1461 = writer.prefix("AddressingType");
    if let Some(var_1462) = &input.addressing_type {
        scope_1461.string(var_1462);
    }
    #[allow(unused_mut)]
    let mut scope_1463 = writer.prefix("BlockDeviceMapping");
    if let Some(var_1464) = &input.block_device_mappings {
        let mut list_1466 = scope_1463.start_list(true, Some("item"));
        for item_1465 in var_1464 {
            #[allow(unused_mut)]
            let mut entry_1467 = list_1466.entry();
            crate::query_ser::serialize_structure_crate_model_block_device_mapping(
                entry_1467, item_1465,
            )?;
        }
        list_1466.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1468 = writer.prefix("EbsOptimized");
    if let Some(var_1469) = &input.ebs_optimized {
        scope_1468.boolean(*var_1469);
    }
    #[allow(unused_mut)]
    let mut scope_1470 = writer.prefix("IamInstanceProfile");
    if let Some(var_1471) = &input.iam_instance_profile {
        crate::query_ser::serialize_structure_crate_model_iam_instance_profile_specification(
            scope_1470, var_1471,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1472 = writer.prefix("ImageId");
    if let Some(var_1473) = &input.image_id {
        scope_1472.string(var_1473);
    }
    #[allow(unused_mut)]
    let mut scope_1474 = writer.prefix("InstanceType");
    if let Some(var_1475) = &input.instance_type {
        scope_1474.string(var_1475.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1476 = writer.prefix("KernelId");
    if let Some(var_1477) = &input.kernel_id {
        scope_1476.string(var_1477);
    }
    #[allow(unused_mut)]
    let mut scope_1478 = writer.prefix("KeyName");
    if let Some(var_1479) = &input.key_name {
        scope_1478.string(var_1479);
    }
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("Monitoring");
    if let Some(var_1481) = &input.monitoring {
        crate::query_ser::serialize_structure_crate_model_spot_fleet_monitoring(
            scope_1480, var_1481,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("NetworkInterfaceSet");
    if let Some(var_1483) = &input.network_interfaces {
        let mut list_1485 = scope_1482.start_list(true, Some("item"));
        for item_1484 in var_1483 {
            #[allow(unused_mut)]
            let mut entry_1486 = list_1485.entry();
            crate::query_ser::serialize_structure_crate_model_instance_network_interface_specification(entry_1486, item_1484)?;
        }
        list_1485.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1487 = writer.prefix("Placement");
    if let Some(var_1488) = &input.placement {
        crate::query_ser::serialize_structure_crate_model_spot_placement(scope_1487, var_1488)?;
    }
    #[allow(unused_mut)]
    let mut scope_1489 = writer.prefix("RamdiskId");
    if let Some(var_1490) = &input.ramdisk_id {
        scope_1489.string(var_1490);
    }
    #[allow(unused_mut)]
    let mut scope_1491 = writer.prefix("SpotPrice");
    if let Some(var_1492) = &input.spot_price {
        scope_1491.string(var_1492);
    }
    #[allow(unused_mut)]
    let mut scope_1493 = writer.prefix("SubnetId");
    if let Some(var_1494) = &input.subnet_id {
        scope_1493.string(var_1494);
    }
    #[allow(unused_mut)]
    let mut scope_1495 = writer.prefix("UserData");
    if let Some(var_1496) = &input.user_data {
        scope_1495.string(var_1496);
    }
    #[allow(unused_mut)]
    let mut scope_1497 = writer.prefix("WeightedCapacity");
    if let Some(var_1498) = &input.weighted_capacity {
        scope_1497.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1498).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1499 = writer.prefix("TagSpecificationSet");
    if let Some(var_1500) = &input.tag_specifications {
        let mut list_1502 = scope_1499.start_list(true, Some("item"));
        for item_1501 in var_1500 {
            #[allow(unused_mut)]
            let mut entry_1503 = list_1502.entry();
            crate::query_ser::serialize_structure_crate_model_spot_fleet_tag_specification(
                entry_1503, item_1501,
            )?;
        }
        list_1502.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1504 = writer.prefix("InstanceRequirements");
    if let Some(var_1505) = &input.instance_requirements {
        crate::query_ser::serialize_structure_crate_model_instance_requirements(
            scope_1504, var_1505,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1506 = writer.prefix("ClassicLoadBalancersConfig");
    if let Some(var_1507) = &input.classic_load_balancers_config {
        crate::query_ser::serialize_structure_crate_model_classic_load_balancers_config(
            scope_1506, var_1507,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1508 = writer.prefix("TargetGroupsConfig");
    if let Some(var_1509) = &input.target_groups_config {
        crate::query_ser::serialize_structure_crate_model_target_groups_config(
            scope_1508, var_1509,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1510 = writer.prefix("AvailabilityZone");
    if let Some(var_1511) = &input.availability_zone {
        scope_1510.string(var_1511);
    }
    #[allow(unused_mut)]
    let mut scope_1512 = writer.prefix("GroupName");
    if let Some(var_1513) = &input.group_name {
        scope_1512.string(var_1513);
    }
    #[allow(unused_mut)]
    let mut scope_1514 = writer.prefix("Tenancy");
    if let Some(var_1515) = &input.tenancy {
        scope_1514.string(var_1515.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_market_options(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotMarketOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1516 = writer.prefix("MaxPrice");
    if let Some(var_1517) = &input.max_price {
        scope_1516.string(var_1517);
    }
    #[allow(unused_mut)]
    let mut scope_1518 = writer.prefix("SpotInstanceType");
    if let Some(var_1519) = &input.spot_instance_type {
        scope_1518.string(var_1519.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1520 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1521) = &input.block_duration_minutes {
        scope_1520.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1521).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1522 = writer.prefix("ValidUntil");
    if let Some(var_1523) = &input.valid_until {
        scope_1522.date_time(var_1523, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1524 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1525) = &input.instance_interruption_behavior {
        scope_1524.string(var_1525.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_block_device_mapping(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesBlockDeviceMapping,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1526 = writer.prefix("DeviceName");
    if let Some(var_1527) = &input.device_name {
        scope_1526.string(var_1527);
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("Ebs");
    if let Some(var_1529) = &input.ebs {
        crate::query_ser::serialize_structure_crate_model_scheduled_instances_ebs(
            scope_1528, var_1529,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("NoDevice");
    if let Some(var_1531) = &input.no_device {
        scope_1530.string(var_1531);
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("VirtualName");
    if let Some(var_1533) = &input.virtual_name {
        scope_1532.string(var_1533);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_iam_instance_profile(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIamInstanceProfile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("Arn");
    if let Some(var_1535) = &input.arn {
        scope_1534.string(var_1535);
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("Name");
    if let Some(var_1537) = &input.name {
        scope_1536.string(var_1537);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("Enabled");
    if let Some(var_1539) = &input.enabled {
        scope_1538.boolean(*var_1539);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_network_interface(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesNetworkInterface,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("AssociatePublicIpAddress");
    if let Some(var_1541) = &input.associate_public_ip_address {
        scope_1540.boolean(*var_1541);
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("DeleteOnTermination");
    if let Some(var_1543) = &input.delete_on_termination {
        scope_1542.boolean(*var_1543);
    }
    #[allow(unused_mut)]
    let mut scope_1544 = writer.prefix("Description");
    if let Some(var_1545) = &input.description {
        scope_1544.string(var_1545);
    }
    #[allow(unused_mut)]
    let mut scope_1546 = writer.prefix("DeviceIndex");
    if let Some(var_1547) = &input.device_index {
        scope_1546.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1547).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1548 = writer.prefix("Group");
    if let Some(var_1549) = &input.groups {
        let mut list_1551 = scope_1548.start_list(true, Some("SecurityGroupId"));
        for item_1550 in var_1549 {
            #[allow(unused_mut)]
            let mut entry_1552 = list_1551.entry();
            entry_1552.string(item_1550);
        }
        list_1551.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1553 = writer.prefix("Ipv6AddressCount");
    if let Some(var_1554) = &input.ipv6_address_count {
        scope_1553.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1554).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1555 = writer.prefix("Ipv6Address");
    if let Some(var_1556) = &input.ipv6_addresses {
        let mut list_1558 = scope_1555.start_list(true, Some("Ipv6Address"));
        for item_1557 in var_1556 {
            #[allow(unused_mut)]
            let mut entry_1559 = list_1558.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_ipv6_address(
                entry_1559, item_1557,
            )?;
        }
        list_1558.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1560 = writer.prefix("NetworkInterfaceId");
    if let Some(var_1561) = &input.network_interface_id {
        scope_1560.string(var_1561);
    }
    #[allow(unused_mut)]
    let mut scope_1562 = writer.prefix("PrivateIpAddress");
    if let Some(var_1563) = &input.private_ip_address {
        scope_1562.string(var_1563);
    }
    #[allow(unused_mut)]
    let mut scope_1564 = writer.prefix("PrivateIpAddressConfig");
    if let Some(var_1565) = &input.private_ip_address_configs {
        let mut list_1567 = scope_1564.start_list(true, Some("PrivateIpAddressConfigSet"));
        for item_1566 in var_1565 {
            #[allow(unused_mut)]
            let mut entry_1568 = list_1567.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_instances_private_ip_address_config(entry_1568, item_1566)?;
        }
        list_1567.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1569 = writer.prefix("SecondaryPrivateIpAddressCount");
    if let Some(var_1570) = &input.secondary_private_ip_address_count {
        scope_1569.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1570).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1571 = writer.prefix("SubnetId");
    if let Some(var_1572) = &input.subnet_id {
        scope_1571.string(var_1572);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_placement(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPlacement,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1573 = writer.prefix("AvailabilityZone");
    if let Some(var_1574) = &input.availability_zone {
        scope_1573.string(var_1574);
    }
    #[allow(unused_mut)]
    let mut scope_1575 = writer.prefix("GroupName");
    if let Some(var_1576) = &input.group_name {
        scope_1575.string(var_1576);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_fleet_spot_capacity_rebalance_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::FleetSpotCapacityRebalanceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1577 = writer.prefix("ReplacementStrategy");
    if let Some(var_1578) = &input.replacement_strategy {
        scope_1577.string(var_1578.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1579 = writer.prefix("TerminationDelay");
    if let Some(var_1580) = &input.termination_delay {
        scope_1579.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1580).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_ebs_block_device_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateEbsBlockDeviceRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1581 = writer.prefix("Encrypted");
    if let Some(var_1582) = &input.encrypted {
        scope_1581.boolean(*var_1582);
    }
    #[allow(unused_mut)]
    let mut scope_1583 = writer.prefix("DeleteOnTermination");
    if let Some(var_1584) = &input.delete_on_termination {
        scope_1583.boolean(*var_1584);
    }
    #[allow(unused_mut)]
    let mut scope_1585 = writer.prefix("Iops");
    if let Some(var_1586) = &input.iops {
        scope_1585.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1586).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("KmsKeyId");
    if let Some(var_1588) = &input.kms_key_id {
        scope_1587.string(var_1588);
    }
    #[allow(unused_mut)]
    let mut scope_1589 = writer.prefix("SnapshotId");
    if let Some(var_1590) = &input.snapshot_id {
        scope_1589.string(var_1590);
    }
    #[allow(unused_mut)]
    let mut scope_1591 = writer.prefix("VolumeSize");
    if let Some(var_1592) = &input.volume_size {
        scope_1591.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1592).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1593 = writer.prefix("VolumeType");
    if let Some(var_1594) = &input.volume_type {
        scope_1593.string(var_1594.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1595 = writer.prefix("Throughput");
    if let Some(var_1596) = &input.throughput {
        scope_1595.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1596).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_ipv6_address_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceIpv6AddressRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1597 = writer.prefix("Ipv6Address");
    if let Some(var_1598) = &input.ipv6_address {
        scope_1597.string(var_1598);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_launch_template_spot_market_options_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::LaunchTemplateSpotMarketOptionsRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1599 = writer.prefix("MaxPrice");
    if let Some(var_1600) = &input.max_price {
        scope_1599.string(var_1600);
    }
    #[allow(unused_mut)]
    let mut scope_1601 = writer.prefix("SpotInstanceType");
    if let Some(var_1602) = &input.spot_instance_type {
        scope_1601.string(var_1602.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1603 = writer.prefix("BlockDurationMinutes");
    if let Some(var_1604) = &input.block_duration_minutes {
        scope_1603.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1604).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1605 = writer.prefix("ValidUntil");
    if let Some(var_1606) = &input.valid_until {
        scope_1605.date_time(var_1606, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1607 = writer.prefix("InstanceInterruptionBehavior");
    if let Some(var_1608) = &input.instance_interruption_behavior {
        scope_1607.string(var_1608.as_str());
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_packet_header_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PacketHeaderStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1609 = writer.prefix("SourceAddress");
    if let Some(var_1610) = &input.source_addresses {
        let mut list_1612 = scope_1609.start_list(true, Some("item"));
        for item_1611 in var_1610 {
            #[allow(unused_mut)]
            let mut entry_1613 = list_1612.entry();
            entry_1613.string(item_1611);
        }
        list_1612.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1614 = writer.prefix("DestinationAddress");
    if let Some(var_1615) = &input.destination_addresses {
        let mut list_1617 = scope_1614.start_list(true, Some("item"));
        for item_1616 in var_1615 {
            #[allow(unused_mut)]
            let mut entry_1618 = list_1617.entry();
            entry_1618.string(item_1616);
        }
        list_1617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("SourcePort");
    if let Some(var_1620) = &input.source_ports {
        let mut list_1622 = scope_1619.start_list(true, Some("item"));
        for item_1621 in var_1620 {
            #[allow(unused_mut)]
            let mut entry_1623 = list_1622.entry();
            entry_1623.string(item_1621);
        }
        list_1622.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1624 = writer.prefix("DestinationPort");
    if let Some(var_1625) = &input.destination_ports {
        let mut list_1627 = scope_1624.start_list(true, Some("item"));
        for item_1626 in var_1625 {
            #[allow(unused_mut)]
            let mut entry_1628 = list_1627.entry();
            entry_1628.string(item_1626);
        }
        list_1627.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1629 = writer.prefix("SourcePrefixList");
    if let Some(var_1630) = &input.source_prefix_lists {
        let mut list_1632 = scope_1629.start_list(true, Some("item"));
        for item_1631 in var_1630 {
            #[allow(unused_mut)]
            let mut entry_1633 = list_1632.entry();
            entry_1633.string(item_1631);
        }
        list_1632.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1634 = writer.prefix("DestinationPrefixList");
    if let Some(var_1635) = &input.destination_prefix_lists {
        let mut list_1637 = scope_1634.start_list(true, Some("item"));
        for item_1636 in var_1635 {
            #[allow(unused_mut)]
            let mut entry_1638 = list_1637.entry();
            entry_1638.string(item_1636);
        }
        list_1637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1639 = writer.prefix("Protocol");
    if let Some(var_1640) = &input.protocols {
        let mut list_1642 = scope_1639.start_list(true, Some("item"));
        for item_1641 in var_1640 {
            #[allow(unused_mut)]
            let mut entry_1643 = list_1642.entry();
            entry_1643.string(item_1641.as_str());
        }
        list_1642.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_resource_statement_request(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ResourceStatementRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("Resource");
    if let Some(var_1645) = &input.resources {
        let mut list_1647 = scope_1644.start_list(true, Some("item"));
        for item_1646 in var_1645 {
            #[allow(unused_mut)]
            let mut entry_1648 = list_1647.entry();
            entry_1648.string(item_1646);
        }
        list_1647.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1649 = writer.prefix("ResourceType");
    if let Some(var_1650) = &input.resource_types {
        let mut list_1652 = scope_1649.start_list(true, Some("item"));
        for item_1651 in var_1650 {
            #[allow(unused_mut)]
            let mut entry_1653 = list_1652.entry();
            entry_1653.string(item_1651);
        }
        list_1652.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_instance_requirements(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::InstanceRequirements,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1654 = writer.prefix("VCpuCount");
    if let Some(var_1655) = &input.v_cpu_count {
        crate::query_ser::serialize_structure_crate_model_v_cpu_count_range(scope_1654, var_1655)?;
    }
    #[allow(unused_mut)]
    let mut scope_1656 = writer.prefix("MemoryMiB");
    if let Some(var_1657) = &input.memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_memory_mi_b(scope_1656, var_1657)?;
    }
    #[allow(unused_mut)]
    let mut scope_1658 = writer.prefix("CpuManufacturerSet");
    if let Some(var_1659) = &input.cpu_manufacturers {
        let mut list_1661 = scope_1658.start_list(true, Some("item"));
        for item_1660 in var_1659 {
            #[allow(unused_mut)]
            let mut entry_1662 = list_1661.entry();
            entry_1662.string(item_1660.as_str());
        }
        list_1661.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("MemoryGiBPerVCpu");
    if let Some(var_1664) = &input.memory_gi_b_per_v_cpu {
        crate::query_ser::serialize_structure_crate_model_memory_gi_b_per_v_cpu(
            scope_1663, var_1664,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("ExcludedInstanceTypeSet");
    if let Some(var_1666) = &input.excluded_instance_types {
        let mut list_1668 = scope_1665.start_list(true, Some("item"));
        for item_1667 in var_1666 {
            #[allow(unused_mut)]
            let mut entry_1669 = list_1668.entry();
            entry_1669.string(item_1667);
        }
        list_1668.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1670 = writer.prefix("InstanceGenerationSet");
    if let Some(var_1671) = &input.instance_generations {
        let mut list_1673 = scope_1670.start_list(true, Some("item"));
        for item_1672 in var_1671 {
            #[allow(unused_mut)]
            let mut entry_1674 = list_1673.entry();
            entry_1674.string(item_1672.as_str());
        }
        list_1673.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1675 = writer.prefix("SpotMaxPricePercentageOverLowestPrice");
    if let Some(var_1676) = &input.spot_max_price_percentage_over_lowest_price {
        scope_1675.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1676).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1677 = writer.prefix("OnDemandMaxPricePercentageOverLowestPrice");
    if let Some(var_1678) = &input.on_demand_max_price_percentage_over_lowest_price {
        scope_1677.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1678).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1679 = writer.prefix("BareMetal");
    if let Some(var_1680) = &input.bare_metal {
        scope_1679.string(var_1680.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1681 = writer.prefix("BurstablePerformance");
    if let Some(var_1682) = &input.burstable_performance {
        scope_1681.string(var_1682.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1683 = writer.prefix("RequireHibernateSupport");
    if let Some(var_1684) = &input.require_hibernate_support {
        scope_1683.boolean(*var_1684);
    }
    #[allow(unused_mut)]
    let mut scope_1685 = writer.prefix("NetworkInterfaceCount");
    if let Some(var_1686) = &input.network_interface_count {
        crate::query_ser::serialize_structure_crate_model_network_interface_count(
            scope_1685, var_1686,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1687 = writer.prefix("LocalStorage");
    if let Some(var_1688) = &input.local_storage {
        scope_1687.string(var_1688.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1689 = writer.prefix("LocalStorageTypeSet");
    if let Some(var_1690) = &input.local_storage_types {
        let mut list_1692 = scope_1689.start_list(true, Some("item"));
        for item_1691 in var_1690 {
            #[allow(unused_mut)]
            let mut entry_1693 = list_1692.entry();
            entry_1693.string(item_1691.as_str());
        }
        list_1692.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("TotalLocalStorageGB");
    if let Some(var_1695) = &input.total_local_storage_gb {
        crate::query_ser::serialize_structure_crate_model_total_local_storage_gb(
            scope_1694, var_1695,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("BaselineEbsBandwidthMbps");
    if let Some(var_1697) = &input.baseline_ebs_bandwidth_mbps {
        crate::query_ser::serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
            scope_1696, var_1697,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1698 = writer.prefix("AcceleratorTypeSet");
    if let Some(var_1699) = &input.accelerator_types {
        let mut list_1701 = scope_1698.start_list(true, Some("item"));
        for item_1700 in var_1699 {
            #[allow(unused_mut)]
            let mut entry_1702 = list_1701.entry();
            entry_1702.string(item_1700.as_str());
        }
        list_1701.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("AcceleratorCount");
    if let Some(var_1704) = &input.accelerator_count {
        crate::query_ser::serialize_structure_crate_model_accelerator_count(scope_1703, var_1704)?;
    }
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("AcceleratorManufacturerSet");
    if let Some(var_1706) = &input.accelerator_manufacturers {
        let mut list_1708 = scope_1705.start_list(true, Some("item"));
        for item_1707 in var_1706 {
            #[allow(unused_mut)]
            let mut entry_1709 = list_1708.entry();
            entry_1709.string(item_1707.as_str());
        }
        list_1708.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1710 = writer.prefix("AcceleratorNameSet");
    if let Some(var_1711) = &input.accelerator_names {
        let mut list_1713 = scope_1710.start_list(true, Some("item"));
        for item_1712 in var_1711 {
            #[allow(unused_mut)]
            let mut entry_1714 = list_1713.entry();
            entry_1714.string(item_1712.as_str());
        }
        list_1713.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1715 = writer.prefix("AcceleratorTotalMemoryMiB");
    if let Some(var_1716) = &input.accelerator_total_memory_mi_b {
        crate::query_ser::serialize_structure_crate_model_accelerator_total_memory_mi_b(
            scope_1715, var_1716,
        )?;
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_capacity_rebalance(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotCapacityRebalance,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1717 = writer.prefix("ReplacementStrategy");
    if let Some(var_1718) = &input.replacement_strategy {
        scope_1717.string(var_1718.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1719 = writer.prefix("TerminationDelay");
    if let Some(var_1720) = &input.termination_delay {
        scope_1719.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1720).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_group_identifier(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::GroupIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1721 = writer.prefix("GroupName");
    if let Some(var_1722) = &input.group_name {
        scope_1721.string(var_1722);
    }
    #[allow(unused_mut)]
    let mut scope_1723 = writer.prefix("GroupId");
    if let Some(var_1724) = &input.group_id {
        scope_1723.string(var_1724);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_monitoring(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetMonitoring,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1725 = writer.prefix("Enabled");
    if let Some(var_1726) = &input.enabled {
        scope_1725.boolean(*var_1726);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_spot_fleet_tag_specification(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SpotFleetTagSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1727 = writer.prefix("ResourceType");
    if let Some(var_1728) = &input.resource_type {
        scope_1727.string(var_1728.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1729 = writer.prefix("Tag");
    if let Some(var_1730) = &input.tags {
        let mut list_1732 = scope_1729.start_list(true, Some("item"));
        for item_1731 in var_1730 {
            #[allow(unused_mut)]
            let mut entry_1733 = list_1732.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1733, item_1731)?;
        }
        list_1732.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancers_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancersConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1734 = writer.prefix("ClassicLoadBalancers");
    if let Some(var_1735) = &input.classic_load_balancers {
        let mut list_1737 = scope_1734.start_list(true, Some("item"));
        for item_1736 in var_1735 {
            #[allow(unused_mut)]
            let mut entry_1738 = list_1737.entry();
            crate::query_ser::serialize_structure_crate_model_classic_load_balancer(
                entry_1738, item_1736,
            )?;
        }
        list_1737.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_groups_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroupsConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1739 = writer.prefix("TargetGroups");
    if let Some(var_1740) = &input.target_groups {
        let mut list_1742 = scope_1739.start_list(true, Some("item"));
        for item_1741 in var_1740 {
            #[allow(unused_mut)]
            let mut entry_1743 = list_1742.entry();
            crate::query_ser::serialize_structure_crate_model_target_group(entry_1743, item_1741)?;
        }
        list_1742.finish();
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ebs(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesEbs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("DeleteOnTermination");
    if let Some(var_1745) = &input.delete_on_termination {
        scope_1744.boolean(*var_1745);
    }
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("Encrypted");
    if let Some(var_1747) = &input.encrypted {
        scope_1746.boolean(*var_1747);
    }
    #[allow(unused_mut)]
    let mut scope_1748 = writer.prefix("Iops");
    if let Some(var_1749) = &input.iops {
        scope_1748.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1749).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1750 = writer.prefix("SnapshotId");
    if let Some(var_1751) = &input.snapshot_id {
        scope_1750.string(var_1751);
    }
    #[allow(unused_mut)]
    let mut scope_1752 = writer.prefix("VolumeSize");
    if let Some(var_1753) = &input.volume_size {
        scope_1752.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1753).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1754 = writer.prefix("VolumeType");
    if let Some(var_1755) = &input.volume_type {
        scope_1754.string(var_1755);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_ipv6_address(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesIpv6Address,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1756 = writer.prefix("Ipv6Address");
    if let Some(var_1757) = &input.ipv6_address {
        scope_1756.string(var_1757);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_scheduled_instances_private_ip_address_config(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ScheduledInstancesPrivateIpAddressConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1758 = writer.prefix("Primary");
    if let Some(var_1759) = &input.primary {
        scope_1758.boolean(*var_1759);
    }
    #[allow(unused_mut)]
    let mut scope_1760 = writer.prefix("PrivateIpAddress");
    if let Some(var_1761) = &input.private_ip_address {
        scope_1760.string(var_1761);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_v_cpu_count_range(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::VCpuCountRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1762 = writer.prefix("Min");
    if let Some(var_1763) = &input.min {
        scope_1762.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1763).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1764 = writer.prefix("Max");
    if let Some(var_1765) = &input.max {
        scope_1764.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1765).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1766 = writer.prefix("Min");
    if let Some(var_1767) = &input.min {
        scope_1766.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1767).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1768 = writer.prefix("Max");
    if let Some(var_1769) = &input.max {
        scope_1768.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1769).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_memory_gi_b_per_v_cpu(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MemoryGiBPerVCpu,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1770 = writer.prefix("Min");
    if let Some(var_1771) = &input.min {
        scope_1770.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1771).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1772 = writer.prefix("Max");
    if let Some(var_1773) = &input.max {
        scope_1772.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1773).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_network_interface_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::NetworkInterfaceCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1774 = writer.prefix("Min");
    if let Some(var_1775) = &input.min {
        scope_1774.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1775).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1776 = writer.prefix("Max");
    if let Some(var_1777) = &input.max {
        scope_1776.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1777).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_total_local_storage_gb(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TotalLocalStorageGb,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1778 = writer.prefix("Min");
    if let Some(var_1779) = &input.min {
        scope_1778.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1779).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1780 = writer.prefix("Max");
    if let Some(var_1781) = &input.max {
        scope_1780.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_1781).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_baseline_ebs_bandwidth_mbps(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::BaselineEbsBandwidthMbps,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("Min");
    if let Some(var_1783) = &input.min {
        scope_1782.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1783).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("Max");
    if let Some(var_1785) = &input.max {
        scope_1784.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1785).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_count(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorCount,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("Min");
    if let Some(var_1787) = &input.min {
        scope_1786.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1787).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("Max");
    if let Some(var_1789) = &input.max {
        scope_1788.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1789).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_accelerator_total_memory_mi_b(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::AcceleratorTotalMemoryMiB,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1790 = writer.prefix("Min");
    if let Some(var_1791) = &input.min {
        scope_1790.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1791).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1792 = writer.prefix("Max");
    if let Some(var_1793) = &input.max {
        scope_1792.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1793).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_classic_load_balancer(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ClassicLoadBalancer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1794 = writer.prefix("Name");
    if let Some(var_1795) = &input.name {
        scope_1794.string(var_1795);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_target_group(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::TargetGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1796 = writer.prefix("Arn");
    if let Some(var_1797) = &input.arn {
        scope_1796.string(var_1797);
    }
    Ok(())
}
